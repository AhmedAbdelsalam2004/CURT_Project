
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000872  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab7  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bb  00000000  00000000  00001467  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000747  00000000  00000000  00001c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  0000236c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000454  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000430  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  74:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Init>:
#include <avr/io.h>
#include <util/delay.h>

void ADC_Init()
{ 
	setbit(ADMUX, REFS0); // AVcc with external capacitor at AREF pin
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	87 b9       	out	0x07, r24	; 7
	setbit(ADCSRA,ADEN);  // Enable ADC
  82:	86 b1       	in	r24, 0x06	; 6
  84:	80 68       	ori	r24, 0x80	; 128
  86:	86 b9       	out	0x06, r24	; 6
	clrbit(ADCSRA,ADPS0); //set Prescaler to 64
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	8e 7f       	andi	r24, 0xFE	; 254
  8c:	86 b9       	out	0x06, r24	; 6
	setbit(ADCSRA,ADPS1);
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	82 60       	ori	r24, 0x02	; 2
  92:	86 b9       	out	0x06, r24	; 6
	setbit(ADCSRA,ADPS2);
  94:	86 b1       	in	r24, 0x06	; 6
  96:	84 60       	ori	r24, 0x04	; 4
  98:	86 b9       	out	0x06, r24	; 6
  9a:	08 95       	ret

0000009c <ADC_Read>:
}

int ADC_Read(char ch)
{
	int value=-1;
	if(ch>=0 && ch<=8)
  9c:	89 30       	cpi	r24, 0x09	; 9
  9e:	b8 f4       	brcc	.+46     	; 0xce <ADC_Read+0x32>
	{
		ADMUX = (ADMUX & 0xE0) | ch; //channel selection 
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	90 7e       	andi	r25, 0xE0	; 224
  a4:	89 2b       	or	r24, r25
  a6:	87 b9       	out	0x07, r24	; 7
		setbit(ADCSRA,ADSC);
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	86 b9       	out	0x06, r24	; 6
		while(Readbit(ADCSRA,ADIF) != 1);
  ae:	34 9b       	sbis	0x06, 4	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <ADC_Read+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	89 ef       	ldi	r24, 0xF9	; 249
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <ADC_Read+0x1a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <ADC_Read+0x20>
  bc:	00 00       	nop
		_delay_ms(1);
		value = (int)ADCL + (int)ADCH * 256;
  be:	24 b1       	in	r18, 0x04	; 4
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	98 2f       	mov	r25, r24
  c6:	88 27       	eor	r24, r24
  c8:	82 0f       	add	r24, r18
  ca:	91 1d       	adc	r25, r1
  cc:	08 95       	ret
	setbit(ADCSRA,ADPS2);
}

int ADC_Read(char ch)
{
	int value=-1;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	9f ef       	ldi	r25, 0xFF	; 255
		while(Readbit(ADCSRA,ADIF) != 1);
		_delay_ms(1);
		value = (int)ADCL + (int)ADCH * 256;
	}
	return value;
  d2:	08 95       	ret

000000d4 <Control_Servo_Motor>:


/* Function to control servo motor in Abnormal state */
void Control_Servo_Motor(void)
{
	Timer2_Set_Duty_Cycle(0.5); // Set the Servo motor for 90 degrees
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	9f e3       	ldi	r25, 0x3F	; 63
  dc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <Timer2_Set_Duty_Cycle>
  e0:	08 95       	ret

000000e2 <Control_System>:
}

/*Function to control LEDs based on received temperature from MCU1*/
void Control_System(unsigned char Received_data)
{
	switch(Received_data)
  e2:	87 34       	cpi	r24, 0x47	; 71
  e4:	69 f0       	breq	.+26     	; 0x100 <Control_System+0x1e>
  e6:	28 f4       	brcc	.+10     	; 0xf2 <Control_System+0x10>
  e8:	81 34       	cpi	r24, 0x41	; 65
  ea:	d9 f1       	breq	.+118    	; 0x162 <Control_System+0x80>
  ec:	85 34       	cpi	r24, 0x45	; 69
  ee:	a9 f1       	breq	.+106    	; 0x15a <Control_System+0x78>
  f0:	08 95       	ret
  f2:	83 35       	cpi	r24, 0x53	; 83
  f4:	49 f1       	breq	.+82     	; 0x148 <Control_System+0x66>
  f6:	89 35       	cpi	r24, 0x59	; 89
  f8:	79 f0       	breq	.+30     	; 0x118 <Control_System+0x36>
  fa:	82 35       	cpi	r24, 0x52	; 82
  fc:	e1 f5       	brne	.+120    	; 0x176 <Control_System+0x94>
  fe:	18 c0       	rjmp	.+48     	; 0x130 <Control_System+0x4e>
	{
		case 'G':
			setbit(PORTC, 2); //Turn on green led
 100:	85 b3       	in	r24, 0x15	; 21
 102:	84 60       	ori	r24, 0x04	; 4
 104:	85 bb       	out	0x15, r24	; 21
			clrbit(PORTC, 4); //Turn off yellow led
 106:	85 b3       	in	r24, 0x15	; 21
 108:	8f 7e       	andi	r24, 0xEF	; 239
 10a:	85 bb       	out	0x15, r24	; 21
			clrbit(PORTC, 6); //Turn off red led
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	8f 7b       	andi	r24, 0xBF	; 191
 110:	85 bb       	out	0x15, r24	; 21
			Mortor_flag = 0;
 112:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 116:	08 95       	ret
		case 'Y':
			clrbit(PORTC, 2); //Turn off green led
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	8b 7f       	andi	r24, 0xFB	; 251
 11c:	85 bb       	out	0x15, r24	; 21
			setbit(PORTC, 4); //Turn on yellow led
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	80 61       	ori	r24, 0x10	; 16
 122:	85 bb       	out	0x15, r24	; 21
			clrbit(PORTC, 6); //Turn off red led
 124:	85 b3       	in	r24, 0x15	; 21
 126:	8f 7b       	andi	r24, 0xBF	; 191
 128:	85 bb       	out	0x15, r24	; 21
			Mortor_flag = 0;
 12a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 12e:	08 95       	ret
		case 'R':
			clrbit(PORTC, 2); //Turn off green led
 130:	85 b3       	in	r24, 0x15	; 21
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	85 bb       	out	0x15, r24	; 21
			clrbit(PORTC, 4); //Turn off yellow led
 136:	85 b3       	in	r24, 0x15	; 21
 138:	8f 7e       	andi	r24, 0xEF	; 239
 13a:	85 bb       	out	0x15, r24	; 21
			setbit(PORTC, 6); //Turn on red led
 13c:	85 b3       	in	r24, 0x15	; 21
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	85 bb       	out	0x15, r24	; 21
			Mortor_flag = 0;
 142:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 146:	08 95       	ret
		case 'S':
			Timer0_Set_Duty_Cycle(0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	cb 01       	movw	r24, r22
 14e:	0e 94 47 01 	call	0x28e	; 0x28e <Timer0_Set_Duty_Cycle>
			Mortor_flag = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
 158:	08 95       	ret
		case 'E':
			setbit(PORTA, 1);//Turn Buzzer on
 15a:	8b b3       	in	r24, 0x1b	; 27
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	8b bb       	out	0x1b, r24	; 27
			break;
 160:	08 95       	ret
		case 'A':
			Control_Servo_Motor();
 162:	0e 94 6a 00 	call	0xd4	; 0xd4 <Control_Servo_Motor>
			Timer0_Set_Duty_Cycle(0);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	cb 01       	movw	r24, r22
 16c:	0e 94 47 01 	call	0x28e	; 0x28e <Timer0_Set_Duty_Cycle>
			Mortor_flag = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 176:	08 95       	ret

00000178 <System_INITS>:
}

/* Function for all initializations needed */
void System_INITS(void)
{
	UART_INIT(12);//UBRR is 12 for BAUD rate of 9600 with 1MHz frequency
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_INIT>
	Timer0_Fast_PWM_INIT();
 180:	0e 94 13 01 	call	0x226	; 0x226 <Timer0_Fast_PWM_INIT>
	Timer2_Servo_Motor_INIT();
 184:	0e 94 2d 01 	call	0x25a	; 0x25a <Timer2_Servo_Motor_INIT>
	ADC_Init();
 188:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Init>
 18c:	08 95       	ret

0000018e <main>:
}


int main(void)
{
	System_INITS();
 18e:	0e 94 bc 00 	call	0x178	; 0x178 <System_INITS>
	
	setbit(DDRC,2); //Green Led pin Output
 192:	84 b3       	in	r24, 0x14	; 20
 194:	84 60       	ori	r24, 0x04	; 4
 196:	84 bb       	out	0x14, r24	; 20
	setbit(DDRC,4); //Yellow Led pin Output
 198:	84 b3       	in	r24, 0x14	; 20
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	84 bb       	out	0x14, r24	; 20
	setbit(DDRC,6); //Red Led pin Output
 19e:	84 b3       	in	r24, 0x14	; 20
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	84 bb       	out	0x14, r24	; 20
	setbit(DDRA,1); //Buzzer pin Output
 1a4:	8a b3       	in	r24, 0x1a	; 26
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	8a bb       	out	0x1a, r24	; 26
	clrbit(DDRA,0); //Potentiometer pin Input
 1aa:	8a b3       	in	r24, 0x1a	; 26
 1ac:	8e 7f       	andi	r24, 0xFE	; 254
 1ae:	8a bb       	out	0x1a, r24	; 26
	
	unsigned char Received_Data = 0;
	double Potentiometer = 0;
	float Duty_Cycle = 0;
	double temp = 0;
 1b0:	00 e0       	ldi	r16, 0x00	; 0
 1b2:	10 e0       	ldi	r17, 0x00	; 0
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <main+0x34>
		
		Potentiometer = ADC_Read(0);
		
		if(Potentiometer != temp)
		{
			temp = Potentiometer;
 1ba:	0c 2d       	mov	r16, r12
 1bc:	1d 2d       	mov	r17, r13
 1be:	de 2d       	mov	r29, r14
 1c0:	cf 2d       	mov	r28, r15
	double temp = 0;
	
    while (1) 
    {

		Received_Data = UART_RX();
 1c2:	0e 94 c2 01 	call	0x384	; 0x384 <UART_RX>
		
		Control_System(Received_Data);
 1c6:	0e 94 71 00 	call	0xe2	; 0xe2 <Control_System>
		
		Potentiometer = ADC_Read(0);
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 4e 00 	call	0x9c	; 0x9c <ADC_Read>
 1d0:	bc 01       	movw	r22, r24
 1d2:	99 0f       	add	r25, r25
 1d4:	88 0b       	sbc	r24, r24
 1d6:	99 0b       	sbc	r25, r25
 1d8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__floatsisf>
 1dc:	c6 2e       	mov	r12, r22
 1de:	d7 2e       	mov	r13, r23
 1e0:	e8 2e       	mov	r14, r24
 1e2:	f9 2e       	mov	r15, r25
		
		if(Potentiometer != temp)
 1e4:	26 2f       	mov	r18, r22
 1e6:	37 2f       	mov	r19, r23
 1e8:	48 2f       	mov	r20, r24
 1ea:	59 2f       	mov	r21, r25
 1ec:	60 2f       	mov	r22, r16
 1ee:	71 2f       	mov	r23, r17
 1f0:	8d 2f       	mov	r24, r29
 1f2:	9c 2f       	mov	r25, r28
 1f4:	0e 94 33 02 	call	0x466	; 0x466 <__cmpsf2>
 1f8:	88 23       	and	r24, r24
 1fa:	19 f3       	breq	.-58     	; 0x1c2 <main+0x34>
		{
			temp = Potentiometer;
			Duty_Cycle = (Potentiometer) / 1023;
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 ec       	ldi	r19, 0xC0	; 192
 200:	4f e7       	ldi	r20, 0x7F	; 127
 202:	54 e4       	ldi	r21, 0x44	; 68
 204:	6c 2d       	mov	r22, r12
 206:	7d 2d       	mov	r23, r13
 208:	8e 2d       	mov	r24, r14
 20a:	9f 2d       	mov	r25, r15
 20c:	0e 94 38 02 	call	0x470	; 0x470 <__divsf3>
			
			if(Mortor_flag == 0)
 210:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 214:	21 11       	cpse	r18, r1
 216:	d1 cf       	rjmp	.-94     	; 0x1ba <main+0x2c>
			{
				Timer0_Set_Duty_Cycle(Duty_Cycle);
 218:	0e 94 47 01 	call	0x28e	; 0x28e <Timer0_Set_Duty_Cycle>
		
		Potentiometer = ADC_Read(0);
		
		if(Potentiometer != temp)
		{
			temp = Potentiometer;
 21c:	0c 2d       	mov	r16, r12
 21e:	1d 2d       	mov	r17, r13
 220:	de 2d       	mov	r29, r14
 222:	cf 2d       	mov	r28, r15
 224:	ce cf       	rjmp	.-100    	; 0x1c2 <main+0x34>

00000226 <Timer0_Fast_PWM_INIT>:
#include "Timer.h"


void Timer0_Fast_PWM_INIT()
{
	setbit(TCCR0,WGM00);// Set mode to Fast PWM
 226:	83 b7       	in	r24, 0x33	; 51
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	83 bf       	out	0x33, r24	; 51
	setbit(TCCR0,WGM01);
 22c:	83 b7       	in	r24, 0x33	; 51
 22e:	88 60       	ori	r24, 0x08	; 8
 230:	83 bf       	out	0x33, r24	; 51
	
	setbit(DDRB,3);// Set OC0 as output
 232:	87 b3       	in	r24, 0x17	; 23
 234:	88 60       	ori	r24, 0x08	; 8
 236:	87 bb       	out	0x17, r24	; 23
	
	clrbit(TCCR0,CS00);// PreScalar = 8
 238:	83 b7       	in	r24, 0x33	; 51
 23a:	8e 7f       	andi	r24, 0xFE	; 254
 23c:	83 bf       	out	0x33, r24	; 51
	setbit(TCCR0,CS01);
 23e:	83 b7       	in	r24, 0x33	; 51
 240:	82 60       	ori	r24, 0x02	; 2
 242:	83 bf       	out	0x33, r24	; 51
	clrbit(TCCR0,CS02);
 244:	83 b7       	in	r24, 0x33	; 51
 246:	8b 7f       	andi	r24, 0xFB	; 251
 248:	83 bf       	out	0x33, r24	; 51
	
	clrbit(TCCR0,COM00);// non_Inverting mode
 24a:	83 b7       	in	r24, 0x33	; 51
 24c:	8f 7e       	andi	r24, 0xEF	; 239
 24e:	83 bf       	out	0x33, r24	; 51
	setbit(TCCR0,COM01);
 250:	83 b7       	in	r24, 0x33	; 51
 252:	80 62       	ori	r24, 0x20	; 32
 254:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = 0;
 256:	1c be       	out	0x3c, r1	; 60
 258:	08 95       	ret

0000025a <Timer2_Servo_Motor_INIT>:
}

void Timer2_Servo_Motor_INIT()
{
	 // Set mode to Fast PWM
	 setbit(TCCR2, WGM20);
 25a:	85 b5       	in	r24, 0x25	; 37
 25c:	80 64       	ori	r24, 0x40	; 64
 25e:	85 bd       	out	0x25, r24	; 37
	 setbit(TCCR2, WGM21);
 260:	85 b5       	in	r24, 0x25	; 37
 262:	88 60       	ori	r24, 0x08	; 8
 264:	85 bd       	out	0x25, r24	; 37
	 
	 // Set OC2 (PD7) as output
	 setbit(DDRD, PD7);
 266:	81 b3       	in	r24, 0x11	; 17
 268:	80 68       	ori	r24, 0x80	; 128
 26a:	81 bb       	out	0x11, r24	; 17
	 
	 // Set Prescaler to 64
	 clrbit(TCCR2, CS22);
 26c:	85 b5       	in	r24, 0x25	; 37
 26e:	8b 7f       	andi	r24, 0xFB	; 251
 270:	85 bd       	out	0x25, r24	; 37
	 setbit(TCCR2, CS21);
 272:	85 b5       	in	r24, 0x25	; 37
 274:	82 60       	ori	r24, 0x02	; 2
 276:	85 bd       	out	0x25, r24	; 37
	 setbit(TCCR2, CS20);
 278:	85 b5       	in	r24, 0x25	; 37
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	85 bd       	out	0x25, r24	; 37
	 
	 // Set to non-inverting mode
	 clrbit(TCCR2, COM20);
 27e:	85 b5       	in	r24, 0x25	; 37
 280:	8f 7e       	andi	r24, 0xEF	; 239
 282:	85 bd       	out	0x25, r24	; 37
	 setbit(TCCR2, COM21);
 284:	85 b5       	in	r24, 0x25	; 37
 286:	80 62       	ori	r24, 0x20	; 32
 288:	85 bd       	out	0x25, r24	; 37
	 
	 OCR2 = 0;
 28a:	13 bc       	out	0x23, r1	; 35
 28c:	08 95       	ret

0000028e <Timer0_Set_Duty_Cycle>:
}


void Timer0_Set_Duty_Cycle(float DC)
{
 28e:	cf 92       	push	r12
 290:	df 92       	push	r13
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	6b 01       	movw	r12, r22
 298:	7c 01       	movw	r14, r24
	if(DC > 0 && DC <= 1)
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	a9 01       	movw	r20, r18
 2a0:	0e 94 8b 03 	call	0x716	; 0x716 <__gesf2>
 2a4:	18 16       	cp	r1, r24
 2a6:	e4 f4       	brge	.+56     	; 0x2e0 <Timer0_Set_Duty_Cycle+0x52>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 e8       	ldi	r20, 0x80	; 128
 2ae:	5f e3       	ldi	r21, 0x3F	; 63
 2b0:	c7 01       	movw	r24, r14
 2b2:	b6 01       	movw	r22, r12
 2b4:	0e 94 33 02 	call	0x466	; 0x466 <__cmpsf2>
 2b8:	18 16       	cp	r1, r24
 2ba:	94 f0       	brlt	.+36     	; 0x2e0 <Timer0_Set_Duty_Cycle+0x52>
	{
		DC = DC * 256;
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	40 e8       	ldi	r20, 0x80	; 128
 2c2:	53 e4       	ldi	r21, 0x43	; 67
 2c4:	c7 01       	movw	r24, r14
 2c6:	b6 01       	movw	r22, r12
 2c8:	0e 94 90 03 	call	0x720	; 0x720 <__mulsf3>
		OCR0 = DC - 1;
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	40 e8       	ldi	r20, 0x80	; 128
 2d2:	5f e3       	ldi	r21, 0x3F	; 63
 2d4:	0e 94 c6 01 	call	0x38c	; 0x38c <__subsf3>
 2d8:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 2dc:	6c bf       	out	0x3c, r22	; 60
 2de:	0a c0       	rjmp	.+20     	; 0x2f4 <Timer0_Set_Duty_Cycle+0x66>
	}
	
	else if(DC <= 0)
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	a9 01       	movw	r20, r18
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	0e 94 33 02 	call	0x466	; 0x466 <__cmpsf2>
 2ee:	18 16       	cp	r1, r24
 2f0:	0c f0       	brlt	.+2      	; 0x2f4 <Timer0_Set_Duty_Cycle+0x66>
	{
		OCR0 = 0;
 2f2:	1c be       	out	0x3c, r1	; 60
	}
	
}
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	08 95       	ret

000002fe <Timer2_Set_Duty_Cycle>:

void Timer2_Set_Duty_Cycle(float DC) {
 2fe:	cf 92       	push	r12
 300:	df 92       	push	r13
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	6b 01       	movw	r12, r22
 308:	7c 01       	movw	r14, r24
	
	if (DC > 0 && DC <= 1) 
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	a9 01       	movw	r20, r18
 310:	0e 94 8b 03 	call	0x716	; 0x716 <__gesf2>
 314:	18 16       	cp	r1, r24
 316:	e4 f4       	brge	.+56     	; 0x350 <Timer2_Set_Duty_Cycle+0x52>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	40 e8       	ldi	r20, 0x80	; 128
 31e:	5f e3       	ldi	r21, 0x3F	; 63
 320:	c7 01       	movw	r24, r14
 322:	b6 01       	movw	r22, r12
 324:	0e 94 33 02 	call	0x466	; 0x466 <__cmpsf2>
 328:	18 16       	cp	r1, r24
 32a:	94 f0       	brlt	.+36     	; 0x350 <Timer2_Set_Duty_Cycle+0x52>
	{
		DC = DC * 256;
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	40 e8       	ldi	r20, 0x80	; 128
 332:	53 e4       	ldi	r21, 0x43	; 67
 334:	c7 01       	movw	r24, r14
 336:	b6 01       	movw	r22, r12
 338:	0e 94 90 03 	call	0x720	; 0x720 <__mulsf3>
		OCR2 = DC - 1;
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 e8       	ldi	r20, 0x80	; 128
 342:	5f e3       	ldi	r21, 0x3F	; 63
 344:	0e 94 c6 01 	call	0x38c	; 0x38c <__subsf3>
 348:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 34c:	63 bd       	out	0x23, r22	; 35
 34e:	0a c0       	rjmp	.+20     	; 0x364 <Timer2_Set_Duty_Cycle+0x66>
	} 
		else if (DC <= 0) 
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	a9 01       	movw	r20, r18
 356:	c7 01       	movw	r24, r14
 358:	b6 01       	movw	r22, r12
 35a:	0e 94 33 02 	call	0x466	; 0x466 <__cmpsf2>
 35e:	18 16       	cp	r1, r24
 360:	0c f0       	brlt	.+2      	; 0x364 <Timer2_Set_Duty_Cycle+0x66>
	{
		OCR2 = 0;
 362:	13 bc       	out	0x23, r1	; 35
	}
}
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	df 90       	pop	r13
 36a:	cf 90       	pop	r12
 36c:	08 95       	ret

0000036e <UART_INIT>:
void UART_TX(char data)
{
	while (Readbit(UCSRA,UDRE) == 0);
	UDR = data;
	while (Readbit(UCSRA,TXC) == 0);
}
 36e:	89 b9       	out	0x09, r24	; 9
 370:	10 bc       	out	0x20, r1	; 32
 372:	8a b1       	in	r24, 0x0a	; 10
 374:	80 61       	ori	r24, 0x10	; 16
 376:	8a b9       	out	0x0a, r24	; 10
 378:	8a b1       	in	r24, 0x0a	; 10
 37a:	88 60       	ori	r24, 0x08	; 8
 37c:	8a b9       	out	0x0a, r24	; 10
 37e:	86 e8       	ldi	r24, 0x86	; 134
 380:	80 bd       	out	0x20, r24	; 32
 382:	08 95       	ret

00000384 <UART_RX>:

char UART_RX()
{
	while (Readbit(UCSRA,RXC) == 0);
 384:	5f 9b       	sbis	0x0b, 7	; 11
 386:	fe cf       	rjmp	.-4      	; 0x384 <UART_RX>
	return UDR;
 388:	8c b1       	in	r24, 0x0c	; 12
}
 38a:	08 95       	ret

0000038c <__subsf3>:
 38c:	50 58       	subi	r21, 0x80	; 128

0000038e <__addsf3>:
 38e:	bb 27       	eor	r27, r27
 390:	aa 27       	eor	r26, r26
 392:	0e 94 de 01 	call	0x3bc	; 0x3bc <__addsf3x>
 396:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_round>
 39a:	0e 94 43 03 	call	0x686	; 0x686 <__fp_pscA>
 39e:	38 f0       	brcs	.+14     	; 0x3ae <__addsf3+0x20>
 3a0:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_pscB>
 3a4:	20 f0       	brcs	.+8      	; 0x3ae <__addsf3+0x20>
 3a6:	39 f4       	brne	.+14     	; 0x3b6 <__addsf3+0x28>
 3a8:	9f 3f       	cpi	r25, 0xFF	; 255
 3aa:	19 f4       	brne	.+6      	; 0x3b2 <__addsf3+0x24>
 3ac:	26 f4       	brtc	.+8      	; 0x3b6 <__addsf3+0x28>
 3ae:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_nan>
 3b2:	0e f4       	brtc	.+2      	; 0x3b6 <__addsf3+0x28>
 3b4:	e0 95       	com	r30
 3b6:	e7 fb       	bst	r30, 7
 3b8:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_inf>

000003bc <__addsf3x>:
 3bc:	e9 2f       	mov	r30, r25
 3be:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_split3>
 3c2:	58 f3       	brcs	.-42     	; 0x39a <__addsf3+0xc>
 3c4:	ba 17       	cp	r27, r26
 3c6:	62 07       	cpc	r22, r18
 3c8:	73 07       	cpc	r23, r19
 3ca:	84 07       	cpc	r24, r20
 3cc:	95 07       	cpc	r25, r21
 3ce:	20 f0       	brcs	.+8      	; 0x3d8 <__addsf3x+0x1c>
 3d0:	79 f4       	brne	.+30     	; 0x3f0 <__addsf3x+0x34>
 3d2:	a6 f5       	brtc	.+104    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3d4:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_zero>
 3d8:	0e f4       	brtc	.+2      	; 0x3dc <__addsf3x+0x20>
 3da:	e0 95       	com	r30
 3dc:	0b 2e       	mov	r0, r27
 3de:	ba 2f       	mov	r27, r26
 3e0:	a0 2d       	mov	r26, r0
 3e2:	0b 01       	movw	r0, r22
 3e4:	b9 01       	movw	r22, r18
 3e6:	90 01       	movw	r18, r0
 3e8:	0c 01       	movw	r0, r24
 3ea:	ca 01       	movw	r24, r20
 3ec:	a0 01       	movw	r20, r0
 3ee:	11 24       	eor	r1, r1
 3f0:	ff 27       	eor	r31, r31
 3f2:	59 1b       	sub	r21, r25
 3f4:	99 f0       	breq	.+38     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3f6:	59 3f       	cpi	r21, 0xF9	; 249
 3f8:	50 f4       	brcc	.+20     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3fa:	50 3e       	cpi	r21, 0xE0	; 224
 3fc:	68 f1       	brcs	.+90     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 3fe:	1a 16       	cp	r1, r26
 400:	f0 40       	sbci	r31, 0x00	; 0
 402:	a2 2f       	mov	r26, r18
 404:	23 2f       	mov	r18, r19
 406:	34 2f       	mov	r19, r20
 408:	44 27       	eor	r20, r20
 40a:	58 5f       	subi	r21, 0xF8	; 248
 40c:	f3 cf       	rjmp	.-26     	; 0x3f4 <__addsf3x+0x38>
 40e:	46 95       	lsr	r20
 410:	37 95       	ror	r19
 412:	27 95       	ror	r18
 414:	a7 95       	ror	r26
 416:	f0 40       	sbci	r31, 0x00	; 0
 418:	53 95       	inc	r21
 41a:	c9 f7       	brne	.-14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 41c:	7e f4       	brtc	.+30     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 41e:	1f 16       	cp	r1, r31
 420:	ba 0b       	sbc	r27, r26
 422:	62 0b       	sbc	r22, r18
 424:	73 0b       	sbc	r23, r19
 426:	84 0b       	sbc	r24, r20
 428:	ba f0       	brmi	.+46     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 42a:	91 50       	subi	r25, 0x01	; 1
 42c:	a1 f0       	breq	.+40     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 42e:	ff 0f       	add	r31, r31
 430:	bb 1f       	adc	r27, r27
 432:	66 1f       	adc	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	88 1f       	adc	r24, r24
 438:	c2 f7       	brpl	.-16     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 43a:	0e c0       	rjmp	.+28     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 43c:	ba 0f       	add	r27, r26
 43e:	62 1f       	adc	r22, r18
 440:	73 1f       	adc	r23, r19
 442:	84 1f       	adc	r24, r20
 444:	48 f4       	brcc	.+18     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 446:	87 95       	ror	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b7 95       	ror	r27
 44e:	f7 95       	ror	r31
 450:	9e 3f       	cpi	r25, 0xFE	; 254
 452:	08 f0       	brcs	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 454:	b0 cf       	rjmp	.-160    	; 0x3b6 <__addsf3+0x28>
 456:	93 95       	inc	r25
 458:	88 0f       	add	r24, r24
 45a:	08 f0       	brcs	.+2      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45c:	99 27       	eor	r25, r25
 45e:	ee 0f       	add	r30, r30
 460:	97 95       	ror	r25
 462:	87 95       	ror	r24
 464:	08 95       	ret

00000466 <__cmpsf2>:
 466:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_cmp>
 46a:	08 f4       	brcc	.+2      	; 0x46e <__cmpsf2+0x8>
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	08 95       	ret

00000470 <__divsf3>:
 470:	0e 94 4c 02 	call	0x498	; 0x498 <__divsf3x>
 474:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_round>
 478:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_pscB>
 47c:	58 f0       	brcs	.+22     	; 0x494 <__divsf3+0x24>
 47e:	0e 94 43 03 	call	0x686	; 0x686 <__fp_pscA>
 482:	40 f0       	brcs	.+16     	; 0x494 <__divsf3+0x24>
 484:	29 f4       	brne	.+10     	; 0x490 <__divsf3+0x20>
 486:	5f 3f       	cpi	r21, 0xFF	; 255
 488:	29 f0       	breq	.+10     	; 0x494 <__divsf3+0x24>
 48a:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_inf>
 48e:	51 11       	cpse	r21, r1
 490:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_szero>
 494:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_nan>

00000498 <__divsf3x>:
 498:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_split3>
 49c:	68 f3       	brcs	.-38     	; 0x478 <__divsf3+0x8>

0000049e <__divsf3_pse>:
 49e:	99 23       	and	r25, r25
 4a0:	b1 f3       	breq	.-20     	; 0x48e <__divsf3+0x1e>
 4a2:	55 23       	and	r21, r21
 4a4:	91 f3       	breq	.-28     	; 0x48a <__divsf3+0x1a>
 4a6:	95 1b       	sub	r25, r21
 4a8:	55 0b       	sbc	r21, r21
 4aa:	bb 27       	eor	r27, r27
 4ac:	aa 27       	eor	r26, r26
 4ae:	62 17       	cp	r22, r18
 4b0:	73 07       	cpc	r23, r19
 4b2:	84 07       	cpc	r24, r20
 4b4:	38 f0       	brcs	.+14     	; 0x4c4 <__divsf3_pse+0x26>
 4b6:	9f 5f       	subi	r25, 0xFF	; 255
 4b8:	5f 4f       	sbci	r21, 0xFF	; 255
 4ba:	22 0f       	add	r18, r18
 4bc:	33 1f       	adc	r19, r19
 4be:	44 1f       	adc	r20, r20
 4c0:	aa 1f       	adc	r26, r26
 4c2:	a9 f3       	breq	.-22     	; 0x4ae <__divsf3_pse+0x10>
 4c4:	35 d0       	rcall	.+106    	; 0x530 <__divsf3_pse+0x92>
 4c6:	0e 2e       	mov	r0, r30
 4c8:	3a f0       	brmi	.+14     	; 0x4d8 <__divsf3_pse+0x3a>
 4ca:	e0 e8       	ldi	r30, 0x80	; 128
 4cc:	32 d0       	rcall	.+100    	; 0x532 <__divsf3_pse+0x94>
 4ce:	91 50       	subi	r25, 0x01	; 1
 4d0:	50 40       	sbci	r21, 0x00	; 0
 4d2:	e6 95       	lsr	r30
 4d4:	00 1c       	adc	r0, r0
 4d6:	ca f7       	brpl	.-14     	; 0x4ca <__divsf3_pse+0x2c>
 4d8:	2b d0       	rcall	.+86     	; 0x530 <__divsf3_pse+0x92>
 4da:	fe 2f       	mov	r31, r30
 4dc:	29 d0       	rcall	.+82     	; 0x530 <__divsf3_pse+0x92>
 4de:	66 0f       	add	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	88 1f       	adc	r24, r24
 4e4:	bb 1f       	adc	r27, r27
 4e6:	26 17       	cp	r18, r22
 4e8:	37 07       	cpc	r19, r23
 4ea:	48 07       	cpc	r20, r24
 4ec:	ab 07       	cpc	r26, r27
 4ee:	b0 e8       	ldi	r27, 0x80	; 128
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <__divsf3_pse+0x56>
 4f2:	bb 0b       	sbc	r27, r27
 4f4:	80 2d       	mov	r24, r0
 4f6:	bf 01       	movw	r22, r30
 4f8:	ff 27       	eor	r31, r31
 4fa:	93 58       	subi	r25, 0x83	; 131
 4fc:	5f 4f       	sbci	r21, 0xFF	; 255
 4fe:	3a f0       	brmi	.+14     	; 0x50e <__divsf3_pse+0x70>
 500:	9e 3f       	cpi	r25, 0xFE	; 254
 502:	51 05       	cpc	r21, r1
 504:	78 f0       	brcs	.+30     	; 0x524 <__divsf3_pse+0x86>
 506:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_inf>
 50a:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_szero>
 50e:	5f 3f       	cpi	r21, 0xFF	; 255
 510:	e4 f3       	brlt	.-8      	; 0x50a <__divsf3_pse+0x6c>
 512:	98 3e       	cpi	r25, 0xE8	; 232
 514:	d4 f3       	brlt	.-12     	; 0x50a <__divsf3_pse+0x6c>
 516:	86 95       	lsr	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f7 95       	ror	r31
 520:	9f 5f       	subi	r25, 0xFF	; 255
 522:	c9 f7       	brne	.-14     	; 0x516 <__divsf3_pse+0x78>
 524:	88 0f       	add	r24, r24
 526:	91 1d       	adc	r25, r1
 528:	96 95       	lsr	r25
 52a:	87 95       	ror	r24
 52c:	97 f9       	bld	r25, 7
 52e:	08 95       	ret
 530:	e1 e0       	ldi	r30, 0x01	; 1
 532:	66 0f       	add	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	88 1f       	adc	r24, r24
 538:	bb 1f       	adc	r27, r27
 53a:	62 17       	cp	r22, r18
 53c:	73 07       	cpc	r23, r19
 53e:	84 07       	cpc	r24, r20
 540:	ba 07       	cpc	r27, r26
 542:	20 f0       	brcs	.+8      	; 0x54c <__divsf3_pse+0xae>
 544:	62 1b       	sub	r22, r18
 546:	73 0b       	sbc	r23, r19
 548:	84 0b       	sbc	r24, r20
 54a:	ba 0b       	sbc	r27, r26
 54c:	ee 1f       	adc	r30, r30
 54e:	88 f7       	brcc	.-30     	; 0x532 <__divsf3_pse+0x94>
 550:	e0 95       	com	r30
 552:	08 95       	ret

00000554 <__fixunssfsi>:
 554:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__fp_splitA>
 558:	88 f0       	brcs	.+34     	; 0x57c <__fixunssfsi+0x28>
 55a:	9f 57       	subi	r25, 0x7F	; 127
 55c:	98 f0       	brcs	.+38     	; 0x584 <__fixunssfsi+0x30>
 55e:	b9 2f       	mov	r27, r25
 560:	99 27       	eor	r25, r25
 562:	b7 51       	subi	r27, 0x17	; 23
 564:	b0 f0       	brcs	.+44     	; 0x592 <__fixunssfsi+0x3e>
 566:	e1 f0       	breq	.+56     	; 0x5a0 <__fixunssfsi+0x4c>
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	1a f0       	brmi	.+6      	; 0x578 <__fixunssfsi+0x24>
 572:	ba 95       	dec	r27
 574:	c9 f7       	brne	.-14     	; 0x568 <__fixunssfsi+0x14>
 576:	14 c0       	rjmp	.+40     	; 0x5a0 <__fixunssfsi+0x4c>
 578:	b1 30       	cpi	r27, 0x01	; 1
 57a:	91 f0       	breq	.+36     	; 0x5a0 <__fixunssfsi+0x4c>
 57c:	0e 94 84 03 	call	0x708	; 0x708 <__fp_zero>
 580:	b1 e0       	ldi	r27, 0x01	; 1
 582:	08 95       	ret
 584:	0c 94 84 03 	jmp	0x708	; 0x708 <__fp_zero>
 588:	67 2f       	mov	r22, r23
 58a:	78 2f       	mov	r23, r24
 58c:	88 27       	eor	r24, r24
 58e:	b8 5f       	subi	r27, 0xF8	; 248
 590:	39 f0       	breq	.+14     	; 0x5a0 <__fixunssfsi+0x4c>
 592:	b9 3f       	cpi	r27, 0xF9	; 249
 594:	cc f3       	brlt	.-14     	; 0x588 <__fixunssfsi+0x34>
 596:	86 95       	lsr	r24
 598:	77 95       	ror	r23
 59a:	67 95       	ror	r22
 59c:	b3 95       	inc	r27
 59e:	d9 f7       	brne	.-10     	; 0x596 <__fixunssfsi+0x42>
 5a0:	3e f4       	brtc	.+14     	; 0x5b0 <__fixunssfsi+0x5c>
 5a2:	90 95       	com	r25
 5a4:	80 95       	com	r24
 5a6:	70 95       	com	r23
 5a8:	61 95       	neg	r22
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	8f 4f       	sbci	r24, 0xFF	; 255
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	08 95       	ret

000005b2 <__floatunsisf>:
 5b2:	e8 94       	clt
 5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <__floatsisf+0x12>

000005b6 <__floatsisf>:
 5b6:	97 fb       	bst	r25, 7
 5b8:	3e f4       	brtc	.+14     	; 0x5c8 <__floatsisf+0x12>
 5ba:	90 95       	com	r25
 5bc:	80 95       	com	r24
 5be:	70 95       	com	r23
 5c0:	61 95       	neg	r22
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	8f 4f       	sbci	r24, 0xFF	; 255
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	99 23       	and	r25, r25
 5ca:	a9 f0       	breq	.+42     	; 0x5f6 <__floatsisf+0x40>
 5cc:	f9 2f       	mov	r31, r25
 5ce:	96 e9       	ldi	r25, 0x96	; 150
 5d0:	bb 27       	eor	r27, r27
 5d2:	93 95       	inc	r25
 5d4:	f6 95       	lsr	r31
 5d6:	87 95       	ror	r24
 5d8:	77 95       	ror	r23
 5da:	67 95       	ror	r22
 5dc:	b7 95       	ror	r27
 5de:	f1 11       	cpse	r31, r1
 5e0:	f8 cf       	rjmp	.-16     	; 0x5d2 <__floatsisf+0x1c>
 5e2:	fa f4       	brpl	.+62     	; 0x622 <__floatsisf+0x6c>
 5e4:	bb 0f       	add	r27, r27
 5e6:	11 f4       	brne	.+4      	; 0x5ec <__floatsisf+0x36>
 5e8:	60 ff       	sbrs	r22, 0
 5ea:	1b c0       	rjmp	.+54     	; 0x622 <__floatsisf+0x6c>
 5ec:	6f 5f       	subi	r22, 0xFF	; 255
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	8f 4f       	sbci	r24, 0xFF	; 255
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	16 c0       	rjmp	.+44     	; 0x622 <__floatsisf+0x6c>
 5f6:	88 23       	and	r24, r24
 5f8:	11 f0       	breq	.+4      	; 0x5fe <__floatsisf+0x48>
 5fa:	96 e9       	ldi	r25, 0x96	; 150
 5fc:	11 c0       	rjmp	.+34     	; 0x620 <__floatsisf+0x6a>
 5fe:	77 23       	and	r23, r23
 600:	21 f0       	breq	.+8      	; 0x60a <__floatsisf+0x54>
 602:	9e e8       	ldi	r25, 0x8E	; 142
 604:	87 2f       	mov	r24, r23
 606:	76 2f       	mov	r23, r22
 608:	05 c0       	rjmp	.+10     	; 0x614 <__floatsisf+0x5e>
 60a:	66 23       	and	r22, r22
 60c:	71 f0       	breq	.+28     	; 0x62a <__floatsisf+0x74>
 60e:	96 e8       	ldi	r25, 0x86	; 134
 610:	86 2f       	mov	r24, r22
 612:	70 e0       	ldi	r23, 0x00	; 0
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	2a f0       	brmi	.+10     	; 0x622 <__floatsisf+0x6c>
 618:	9a 95       	dec	r25
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	da f7       	brpl	.-10     	; 0x618 <__floatsisf+0x62>
 622:	88 0f       	add	r24, r24
 624:	96 95       	lsr	r25
 626:	87 95       	ror	r24
 628:	97 f9       	bld	r25, 7
 62a:	08 95       	ret

0000062c <__fp_cmp>:
 62c:	99 0f       	add	r25, r25
 62e:	00 08       	sbc	r0, r0
 630:	55 0f       	add	r21, r21
 632:	aa 0b       	sbc	r26, r26
 634:	e0 e8       	ldi	r30, 0x80	; 128
 636:	fe ef       	ldi	r31, 0xFE	; 254
 638:	16 16       	cp	r1, r22
 63a:	17 06       	cpc	r1, r23
 63c:	e8 07       	cpc	r30, r24
 63e:	f9 07       	cpc	r31, r25
 640:	c0 f0       	brcs	.+48     	; 0x672 <__fp_cmp+0x46>
 642:	12 16       	cp	r1, r18
 644:	13 06       	cpc	r1, r19
 646:	e4 07       	cpc	r30, r20
 648:	f5 07       	cpc	r31, r21
 64a:	98 f0       	brcs	.+38     	; 0x672 <__fp_cmp+0x46>
 64c:	62 1b       	sub	r22, r18
 64e:	73 0b       	sbc	r23, r19
 650:	84 0b       	sbc	r24, r20
 652:	95 0b       	sbc	r25, r21
 654:	39 f4       	brne	.+14     	; 0x664 <__fp_cmp+0x38>
 656:	0a 26       	eor	r0, r26
 658:	61 f0       	breq	.+24     	; 0x672 <__fp_cmp+0x46>
 65a:	23 2b       	or	r18, r19
 65c:	24 2b       	or	r18, r20
 65e:	25 2b       	or	r18, r21
 660:	21 f4       	brne	.+8      	; 0x66a <__fp_cmp+0x3e>
 662:	08 95       	ret
 664:	0a 26       	eor	r0, r26
 666:	09 f4       	brne	.+2      	; 0x66a <__fp_cmp+0x3e>
 668:	a1 40       	sbci	r26, 0x01	; 1
 66a:	a6 95       	lsr	r26
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	81 1d       	adc	r24, r1
 670:	81 1d       	adc	r24, r1
 672:	08 95       	ret

00000674 <__fp_inf>:
 674:	97 f9       	bld	r25, 7
 676:	9f 67       	ori	r25, 0x7F	; 127
 678:	80 e8       	ldi	r24, 0x80	; 128
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	08 95       	ret

00000680 <__fp_nan>:
 680:	9f ef       	ldi	r25, 0xFF	; 255
 682:	80 ec       	ldi	r24, 0xC0	; 192
 684:	08 95       	ret

00000686 <__fp_pscA>:
 686:	00 24       	eor	r0, r0
 688:	0a 94       	dec	r0
 68a:	16 16       	cp	r1, r22
 68c:	17 06       	cpc	r1, r23
 68e:	18 06       	cpc	r1, r24
 690:	09 06       	cpc	r0, r25
 692:	08 95       	ret

00000694 <__fp_pscB>:
 694:	00 24       	eor	r0, r0
 696:	0a 94       	dec	r0
 698:	12 16       	cp	r1, r18
 69a:	13 06       	cpc	r1, r19
 69c:	14 06       	cpc	r1, r20
 69e:	05 06       	cpc	r0, r21
 6a0:	08 95       	ret

000006a2 <__fp_round>:
 6a2:	09 2e       	mov	r0, r25
 6a4:	03 94       	inc	r0
 6a6:	00 0c       	add	r0, r0
 6a8:	11 f4       	brne	.+4      	; 0x6ae <__fp_round+0xc>
 6aa:	88 23       	and	r24, r24
 6ac:	52 f0       	brmi	.+20     	; 0x6c2 <__fp_round+0x20>
 6ae:	bb 0f       	add	r27, r27
 6b0:	40 f4       	brcc	.+16     	; 0x6c2 <__fp_round+0x20>
 6b2:	bf 2b       	or	r27, r31
 6b4:	11 f4       	brne	.+4      	; 0x6ba <__fp_round+0x18>
 6b6:	60 ff       	sbrs	r22, 0
 6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <__fp_round+0x20>
 6ba:	6f 5f       	subi	r22, 0xFF	; 255
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	8f 4f       	sbci	r24, 0xFF	; 255
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	08 95       	ret

000006c4 <__fp_split3>:
 6c4:	57 fd       	sbrc	r21, 7
 6c6:	90 58       	subi	r25, 0x80	; 128
 6c8:	44 0f       	add	r20, r20
 6ca:	55 1f       	adc	r21, r21
 6cc:	59 f0       	breq	.+22     	; 0x6e4 <__fp_splitA+0x10>
 6ce:	5f 3f       	cpi	r21, 0xFF	; 255
 6d0:	71 f0       	breq	.+28     	; 0x6ee <__fp_splitA+0x1a>
 6d2:	47 95       	ror	r20

000006d4 <__fp_splitA>:
 6d4:	88 0f       	add	r24, r24
 6d6:	97 fb       	bst	r25, 7
 6d8:	99 1f       	adc	r25, r25
 6da:	61 f0       	breq	.+24     	; 0x6f4 <__fp_splitA+0x20>
 6dc:	9f 3f       	cpi	r25, 0xFF	; 255
 6de:	79 f0       	breq	.+30     	; 0x6fe <__fp_splitA+0x2a>
 6e0:	87 95       	ror	r24
 6e2:	08 95       	ret
 6e4:	12 16       	cp	r1, r18
 6e6:	13 06       	cpc	r1, r19
 6e8:	14 06       	cpc	r1, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	f2 cf       	rjmp	.-28     	; 0x6d2 <__fp_split3+0xe>
 6ee:	46 95       	lsr	r20
 6f0:	f1 df       	rcall	.-30     	; 0x6d4 <__fp_splitA>
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <__fp_splitA+0x30>
 6f4:	16 16       	cp	r1, r22
 6f6:	17 06       	cpc	r1, r23
 6f8:	18 06       	cpc	r1, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	f1 cf       	rjmp	.-30     	; 0x6e0 <__fp_splitA+0xc>
 6fe:	86 95       	lsr	r24
 700:	71 05       	cpc	r23, r1
 702:	61 05       	cpc	r22, r1
 704:	08 94       	sec
 706:	08 95       	ret

00000708 <__fp_zero>:
 708:	e8 94       	clt

0000070a <__fp_szero>:
 70a:	bb 27       	eor	r27, r27
 70c:	66 27       	eor	r22, r22
 70e:	77 27       	eor	r23, r23
 710:	cb 01       	movw	r24, r22
 712:	97 f9       	bld	r25, 7
 714:	08 95       	ret

00000716 <__gesf2>:
 716:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_cmp>
 71a:	08 f4       	brcc	.+2      	; 0x71e <__gesf2+0x8>
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	08 95       	ret

00000720 <__mulsf3>:
 720:	0e 94 a3 03 	call	0x746	; 0x746 <__mulsf3x>
 724:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_round>
 728:	0e 94 43 03 	call	0x686	; 0x686 <__fp_pscA>
 72c:	38 f0       	brcs	.+14     	; 0x73c <__mulsf3+0x1c>
 72e:	0e 94 4a 03 	call	0x694	; 0x694 <__fp_pscB>
 732:	20 f0       	brcs	.+8      	; 0x73c <__mulsf3+0x1c>
 734:	95 23       	and	r25, r21
 736:	11 f0       	breq	.+4      	; 0x73c <__mulsf3+0x1c>
 738:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_inf>
 73c:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_nan>
 740:	11 24       	eor	r1, r1
 742:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_szero>

00000746 <__mulsf3x>:
 746:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_split3>
 74a:	70 f3       	brcs	.-36     	; 0x728 <__mulsf3+0x8>

0000074c <__mulsf3_pse>:
 74c:	95 9f       	mul	r25, r21
 74e:	c1 f3       	breq	.-16     	; 0x740 <__mulsf3+0x20>
 750:	95 0f       	add	r25, r21
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	55 1f       	adc	r21, r21
 756:	62 9f       	mul	r22, r18
 758:	f0 01       	movw	r30, r0
 75a:	72 9f       	mul	r23, r18
 75c:	bb 27       	eor	r27, r27
 75e:	f0 0d       	add	r31, r0
 760:	b1 1d       	adc	r27, r1
 762:	63 9f       	mul	r22, r19
 764:	aa 27       	eor	r26, r26
 766:	f0 0d       	add	r31, r0
 768:	b1 1d       	adc	r27, r1
 76a:	aa 1f       	adc	r26, r26
 76c:	64 9f       	mul	r22, r20
 76e:	66 27       	eor	r22, r22
 770:	b0 0d       	add	r27, r0
 772:	a1 1d       	adc	r26, r1
 774:	66 1f       	adc	r22, r22
 776:	82 9f       	mul	r24, r18
 778:	22 27       	eor	r18, r18
 77a:	b0 0d       	add	r27, r0
 77c:	a1 1d       	adc	r26, r1
 77e:	62 1f       	adc	r22, r18
 780:	73 9f       	mul	r23, r19
 782:	b0 0d       	add	r27, r0
 784:	a1 1d       	adc	r26, r1
 786:	62 1f       	adc	r22, r18
 788:	83 9f       	mul	r24, r19
 78a:	a0 0d       	add	r26, r0
 78c:	61 1d       	adc	r22, r1
 78e:	22 1f       	adc	r18, r18
 790:	74 9f       	mul	r23, r20
 792:	33 27       	eor	r19, r19
 794:	a0 0d       	add	r26, r0
 796:	61 1d       	adc	r22, r1
 798:	23 1f       	adc	r18, r19
 79a:	84 9f       	mul	r24, r20
 79c:	60 0d       	add	r22, r0
 79e:	21 1d       	adc	r18, r1
 7a0:	82 2f       	mov	r24, r18
 7a2:	76 2f       	mov	r23, r22
 7a4:	6a 2f       	mov	r22, r26
 7a6:	11 24       	eor	r1, r1
 7a8:	9f 57       	subi	r25, 0x7F	; 127
 7aa:	50 40       	sbci	r21, 0x00	; 0
 7ac:	9a f0       	brmi	.+38     	; 0x7d4 <__mulsf3_pse+0x88>
 7ae:	f1 f0       	breq	.+60     	; 0x7ec <__mulsf3_pse+0xa0>
 7b0:	88 23       	and	r24, r24
 7b2:	4a f0       	brmi	.+18     	; 0x7c6 <__mulsf3_pse+0x7a>
 7b4:	ee 0f       	add	r30, r30
 7b6:	ff 1f       	adc	r31, r31
 7b8:	bb 1f       	adc	r27, r27
 7ba:	66 1f       	adc	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	91 50       	subi	r25, 0x01	; 1
 7c2:	50 40       	sbci	r21, 0x00	; 0
 7c4:	a9 f7       	brne	.-22     	; 0x7b0 <__mulsf3_pse+0x64>
 7c6:	9e 3f       	cpi	r25, 0xFE	; 254
 7c8:	51 05       	cpc	r21, r1
 7ca:	80 f0       	brcs	.+32     	; 0x7ec <__mulsf3_pse+0xa0>
 7cc:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_inf>
 7d0:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_szero>
 7d4:	5f 3f       	cpi	r21, 0xFF	; 255
 7d6:	e4 f3       	brlt	.-8      	; 0x7d0 <__mulsf3_pse+0x84>
 7d8:	98 3e       	cpi	r25, 0xE8	; 232
 7da:	d4 f3       	brlt	.-12     	; 0x7d0 <__mulsf3_pse+0x84>
 7dc:	86 95       	lsr	r24
 7de:	77 95       	ror	r23
 7e0:	67 95       	ror	r22
 7e2:	b7 95       	ror	r27
 7e4:	f7 95       	ror	r31
 7e6:	e7 95       	ror	r30
 7e8:	9f 5f       	subi	r25, 0xFF	; 255
 7ea:	c1 f7       	brne	.-16     	; 0x7dc <__mulsf3_pse+0x90>
 7ec:	fe 2b       	or	r31, r30
 7ee:	88 0f       	add	r24, r24
 7f0:	91 1d       	adc	r25, r1
 7f2:	96 95       	lsr	r25
 7f4:	87 95       	ror	r24
 7f6:	97 f9       	bld	r25, 7
 7f8:	08 95       	ret

000007fa <_exit>:
 7fa:	f8 94       	cli

000007fc <__stop_program>:
 7fc:	ff cf       	rjmp	.-2      	; 0x7fc <__stop_program>
