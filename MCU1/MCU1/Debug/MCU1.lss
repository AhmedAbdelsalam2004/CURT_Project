
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000834  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000008a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f86  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093e  00000000  00000000  000019c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d3  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00002cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b4  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b9  00000000  00000000  000033e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003a99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 39 01 	call	0x272	; 0x272 <main>
  74:	0c 94 18 04 	jmp	0x830	; 0x830 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Init>:
#include <avr/io.h>
#include <util/delay.h>

void ADC_Init()
{
	setbit(ADMUX,REFS0);
  7c:	87 b1       	in	r24, 0x07	; 7
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	87 b9       	out	0x07, r24	; 7
	setbit(ADMUX,REFS1);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 68       	ori	r24, 0x80	; 128
  86:	87 b9       	out	0x07, r24	; 7
	setbit(ADCSRA,ADEN);
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	86 b9       	out	0x06, r24	; 6
	setbit(ADCSRA,ADPS2);
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	84 60       	ori	r24, 0x04	; 4
  92:	86 b9       	out	0x06, r24	; 6
  94:	08 95       	ret

00000096 <ADC_Read>:
}

int ADC_Read(char ch)
{
	int value=-1;
	if(ch>=0 && ch<=8)
  96:	89 30       	cpi	r24, 0x09	; 9
  98:	b8 f4       	brcc	.+46     	; 0xc8 <ADC_Read+0x32>
	{
		ADMUX = (ADMUX & 0xE0) | ch; //channel selection 
  9a:	97 b1       	in	r25, 0x07	; 7
  9c:	90 7e       	andi	r25, 0xE0	; 224
  9e:	89 2b       	or	r24, r25
  a0:	87 b9       	out	0x07, r24	; 7
		setbit(ADCSRA,ADSC);
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	86 b9       	out	0x06, r24	; 6
		while(Readbit(ADCSRA,ADIF) != 1);
  a8:	34 9b       	sbis	0x06, 4	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <ADC_Read+0x12>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	89 ef       	ldi	r24, 0xF9	; 249
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <ADC_Read+0x1a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <ADC_Read+0x20>
  b6:	00 00       	nop
		_delay_ms(1);
		value = (int)ADCL + (int)ADCH * 256;
  b8:	24 b1       	in	r18, 0x04	; 4
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	98 2f       	mov	r25, r24
  c0:	88 27       	eor	r24, r24
  c2:	82 0f       	add	r24, r18
  c4:	91 1d       	adc	r25, r1
  c6:	08 95       	ret
	setbit(ADCSRA,ADPS2);
}

int ADC_Read(char ch)
{
	int value=-1;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	9f ef       	ldi	r25, 0xFF	; 255
		while(Readbit(ADCSRA,ADIF) != 1);
		_delay_ms(1);
		value = (int)ADCL + (int)ADCH * 256;
	}
	return value;
  cc:	08 95       	ret

000000ce <EEPROM_Read>:
#include "STD_MacRos.h"
#include "EEPROM.h"

char EEPROM_Read(char Address)
{
	 while (EECR & (1 << EEWE)); // Wait for completion of previous write
  ce:	e1 99       	sbic	0x1c, 1	; 28
  d0:	fe cf       	rjmp	.-4      	; 0xce <EEPROM_Read>
	 EEAR = Address;             // Set up address register
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	9f bb       	out	0x1f, r25	; 31
  d6:	8e bb       	out	0x1e, r24	; 30
	 EECR |= (1 << EERE);        // Start EEPROM read by writing EERE
  d8:	8c b3       	in	r24, 0x1c	; 28
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	8c bb       	out	0x1c, r24	; 28
	 return EEDR;                // Return the data from the EEPROM data register
  de:	8d b3       	in	r24, 0x1d	; 29
}
  e0:	08 95       	ret

000000e2 <EEPROM_Write>:

void EEPROM_Write(char Address, char Data)
{
	while (EECR & (1 << EEWE)); // Wait for completion of previous write
  e2:	e1 99       	sbic	0x1c, 1	; 28
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <EEPROM_Write>
	EEAR = Address;             // Set up address and data registers
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	9f bb       	out	0x1f, r25	; 31
  ea:	8e bb       	out	0x1e, r24	; 30
	EEDR = Data;
  ec:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1 << EEMWE);       // Write logical one to EEMWE
  ee:	8c b3       	in	r24, 0x1c	; 28
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1 << EEWE);        // Start EEPROM write by setting EEWE
  f4:	8c b3       	in	r24, 0x1c	; 28
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	8c bb       	out	0x1c, r24	; 28
  fa:	08 95       	ret

000000fc <External_Interupt1_Init>:
	setbit(GICR, INT0);//Enable PIE
}

void External_Interupt1_Init()
{
	clrbit(DDRD, 3);
  fc:	81 b3       	in	r24, 0x11	; 17
  fe:	87 7f       	andi	r24, 0xF7	; 247
 100:	81 bb       	out	0x11, r24	; 17
	setbit(MCUCR, ISC11);// Interrupt flag will set in the rising edge interrupt 1
 102:	85 b7       	in	r24, 0x35	; 53
 104:	88 60       	ori	r24, 0x08	; 8
 106:	85 bf       	out	0x35, r24	; 53
	setbit(MCUCR, ISC10);
 108:	85 b7       	in	r24, 0x35	; 53
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	85 bf       	out	0x35, r24	; 53
	setbit(GICR, INT1);//Enable PIE
 10e:	8b b7       	in	r24, 0x3b	; 59
 110:	80 68       	ori	r24, 0x80	; 128
 112:	8b bf       	out	0x3b, r24	; 59
 114:	08 95       	ret

00000116 <Control_Fan>:


/* Function to control fan speed based on temperature */
void Control_Fan(unsigned char temperature)
{
	if (temperature < 20)
 116:	84 31       	cpi	r24, 0x14	; 20
 118:	50 f4       	brcc	.+20     	; 0x12e <Control_Fan+0x18>
	{
		Timer0_Set_Duty_Cycle(0);// DC motor off
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	cb 01       	movw	r24, r22
 120:	0e 94 05 02 	call	0x40a	; 0x40a <Timer0_Set_Duty_Cycle>
		EEPROM_Write(EEPROM_STATE_ADDRESS, 1);// Write Normal mode to EEPROM
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_Write>
 12c:	08 95       	ret
	}
	
	else if (temperature >= 20 && temperature < 30)
 12e:	9c ee       	ldi	r25, 0xEC	; 236
 130:	98 0f       	add	r25, r24
 132:	9a 30       	cpi	r25, 0x0A	; 10
 134:	58 f4       	brcc	.+22     	; 0x14c <Control_Fan+0x36>
	{
		Timer0_Set_Duty_Cycle(0.25);// DC motor at 25%
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	9e e3       	ldi	r25, 0x3E	; 62
 13e:	0e 94 05 02 	call	0x40a	; 0x40a <Timer0_Set_Duty_Cycle>
		EEPROM_Write(EEPROM_STATE_ADDRESS, 1);// Write Normal mode to EEPROM
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_Write>
 14a:	08 95       	ret
	}
	
	else if (temperature >= 30 && temperature < 35)
 14c:	92 ee       	ldi	r25, 0xE2	; 226
 14e:	98 0f       	add	r25, r24
 150:	95 30       	cpi	r25, 0x05	; 5
 152:	58 f4       	brcc	.+22     	; 0x16a <Control_Fan+0x54>
	{
		Timer0_Set_Duty_Cycle(0.5);// DC motor at 50%
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	9f e3       	ldi	r25, 0x3F	; 63
 15c:	0e 94 05 02 	call	0x40a	; 0x40a <Timer0_Set_Duty_Cycle>
		EEPROM_Write(EEPROM_STATE_ADDRESS, 1);// Write Normal mode to EEPROM
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_Write>
 168:	08 95       	ret
	}
	
	else if (temperature >= 35 && temperature < 40)
 16a:	9d ed       	ldi	r25, 0xDD	; 221
 16c:	98 0f       	add	r25, r24
 16e:	95 30       	cpi	r25, 0x05	; 5
 170:	58 f4       	brcc	.+22     	; 0x188 <Control_Fan+0x72>
	{
		Timer0_Set_Duty_Cycle(0.75);// DC motor at 75%
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	9f e3       	ldi	r25, 0x3F	; 63
 17a:	0e 94 05 02 	call	0x40a	; 0x40a <Timer0_Set_Duty_Cycle>
		EEPROM_Write(EEPROM_STATE_ADDRESS, 1);// Write Normal mode to EEPROM
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_Write>
 186:	08 95       	ret
	}
	
	else if (temperature >= 40 && temperature <= 50)
 188:	98 ed       	ldi	r25, 0xD8	; 216
 18a:	98 0f       	add	r25, r24
 18c:	9b 30       	cpi	r25, 0x0B	; 11
 18e:	58 f4       	brcc	.+22     	; 0x1a6 <Control_Fan+0x90>
	{
		Timer0_Set_Duty_Cycle(1);// DC motor at 100%
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	9f e3       	ldi	r25, 0x3F	; 63
 198:	0e 94 05 02 	call	0x40a	; 0x40a <Timer0_Set_Duty_Cycle>
		EEPROM_Write(EEPROM_STATE_ADDRESS, 1);// Write Normal mode to EEPROM
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_Write>
 1a4:	08 95       	ret
	}
	
	else if (temperature > 50)
 1a6:	83 33       	cpi	r24, 0x33	; 51
 1a8:	78 f0       	brcs	.+30     	; 0x1c8 <Control_Fan+0xb2>
	{
		Timer0_Set_Duty_Cycle(1);// DC motor at 100%
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	9f e3       	ldi	r25, 0x3F	; 63
 1b2:	0e 94 05 02 	call	0x40a	; 0x40a <Timer0_Set_Duty_Cycle>
		if(EEPROM_Read(EEPROM_STATE_ADDRESS) != 3)
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_Read>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	21 f0       	breq	.+8      	; 0x1c8 <Control_Fan+0xb2>
		{
			EEPROM_Write(EEPROM_STATE_ADDRESS, 2);// Write Emergency mode to EEPROM
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_Write>
 1c8:	08 95       	ret

000001ca <Send_Data_MCU2>:
	}
}

void Send_Data_MCU2(temperature)
{
	if(temperature < 20)
 1ca:	84 31       	cpi	r24, 0x14	; 20
 1cc:	91 05       	cpc	r25, r1
 1ce:	54 f4       	brge	.+20     	; 0x1e4 <Send_Data_MCU2+0x1a>
	{
		UART_TX('G');// G for green led
 1d0:	87 e4       	ldi	r24, 0x47	; 71
 1d2:	0e 94 48 02 	call	0x490	; 0x490 <UART_TX>
 1d6:	87 ea       	ldi	r24, 0xA7	; 167
 1d8:	91 e6       	ldi	r25, 0x61	; 97
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <Send_Data_MCU2+0x10>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <Send_Data_MCU2+0x16>
 1e0:	00 00       	nop
 1e2:	08 95       	ret
		_delay_ms(100);
	}
	else if(temperature >= 20 && temperature < 40)
 1e4:	9c 01       	movw	r18, r24
 1e6:	24 51       	subi	r18, 0x14	; 20
 1e8:	31 09       	sbc	r19, r1
 1ea:	24 31       	cpi	r18, 0x14	; 20
 1ec:	31 05       	cpc	r19, r1
 1ee:	50 f4       	brcc	.+20     	; 0x204 <Send_Data_MCU2+0x3a>
	{
		UART_TX('Y');// Y for yellow led
 1f0:	89 e5       	ldi	r24, 0x59	; 89
 1f2:	0e 94 48 02 	call	0x490	; 0x490 <UART_TX>
 1f6:	87 ea       	ldi	r24, 0xA7	; 167
 1f8:	91 e6       	ldi	r25, 0x61	; 97
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <Send_Data_MCU2+0x30>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <Send_Data_MCU2+0x36>
 200:	00 00       	nop
 202:	08 95       	ret
		_delay_ms(100);
	}
	else if(temperature >= 40 && temperature <= 50)
 204:	9c 01       	movw	r18, r24
 206:	28 52       	subi	r18, 0x28	; 40
 208:	31 09       	sbc	r19, r1
 20a:	2b 30       	cpi	r18, 0x0B	; 11
 20c:	31 05       	cpc	r19, r1
 20e:	50 f4       	brcc	.+20     	; 0x224 <Send_Data_MCU2+0x5a>
	{
		UART_TX('R');// R for red led
 210:	82 e5       	ldi	r24, 0x52	; 82
 212:	0e 94 48 02 	call	0x490	; 0x490 <UART_TX>
 216:	87 ea       	ldi	r24, 0xA7	; 167
 218:	91 e6       	ldi	r25, 0x61	; 97
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <Send_Data_MCU2+0x50>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <Send_Data_MCU2+0x56>
 220:	00 00       	nop
 222:	08 95       	ret
		_delay_ms(100);
	}
	else if(temperature > 50)
 224:	c3 97       	sbiw	r24, 0x33	; 51
 226:	94 f0       	brlt	.+36     	; 0x24c <Send_Data_MCU2+0x82>
	{
		if(EEPROM_Read(EEPROM_STATE_ADDRESS) == 3)
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 67 00 	call	0xce	; 0xce <EEPROM_Read>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	51 f4       	brne	.+20     	; 0x246 <Send_Data_MCU2+0x7c>
		{
			UART_TX('A');//Send to MCU2 for Abnormal state
 232:	81 e4       	ldi	r24, 0x41	; 65
 234:	0e 94 48 02 	call	0x490	; 0x490 <UART_TX>
 238:	87 ea       	ldi	r24, 0xA7	; 167
 23a:	91 e6       	ldi	r25, 0x61	; 97
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <Send_Data_MCU2+0x72>
 240:	00 c0       	rjmp	.+0      	; 0x242 <Send_Data_MCU2+0x78>
 242:	00 00       	nop
 244:	08 95       	ret
			_delay_ms(100);
		}
		
		else
		{
			UART_TX('E');//Send to MCU2 for Emergency state
 246:	85 e4       	ldi	r24, 0x45	; 69
 248:	0e 94 48 02 	call	0x490	; 0x490 <UART_TX>
 24c:	08 95       	ret

0000024e <INITS_System>:
}

/* Function for all initializations needed */
void INITS_System(void)
{
	sei();         // Enable global interrupt (GIE)
 24e:	78 94       	sei
	UART_INIT(12); //UBRR is 12 for BAUD rate of 9600 with 1MHz frequency
 250:	8c e0       	ldi	r24, 0x0C	; 12
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 3d 02 	call	0x47a	; 0x47a <UART_INIT>
	ADC_Init();
 258:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Init>
	Timer0_Fast_PWM_INIT();
 25c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <Timer0_Fast_PWM_INIT>
	External_Interupt1_Init();
 260:	0e 94 7e 00 	call	0xfc	; 0xfc <External_Interupt1_Init>
	timer1_init();
 264:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <timer1_init>
	EEPROM_Write(EEPROM_STATE_ADDRESS, 1);// Write Normal mode to EEPROM
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_Write>
 270:	08 95       	ret

00000272 <main>:
}

int main(void)
{
	INITS_System();
 272:	0e 94 27 01 	call	0x24e	; 0x24e <INITS_System>
		
	clrbit(DDRA,0);//Temperature sensor pin Input
 276:	8a b3       	in	r24, 0x1a	; 26
 278:	8e 7f       	andi	r24, 0xFE	; 254
 27a:	8a bb       	out	0x1a, r24	; 26
	
	
	long int x = 0 , temp = 0;
 27c:	81 2c       	mov	r8, r1
 27e:	91 2c       	mov	r9, r1
 280:	54 01       	movw	r10, r8
	int volt = 0;
	
    while (1) 
    {
		x = ADC_Read(0);// Read ADC value of Temperature sensor 
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_Read>
 288:	6c 01       	movw	r12, r24
 28a:	99 0f       	add	r25, r25
 28c:	ee 08       	sbc	r14, r14
 28e:	ff 08       	sbc	r15, r15
		
		if (x != temp)
 290:	8c 14       	cp	r8, r12
 292:	9d 04       	cpc	r9, r13
 294:	ae 04       	cpc	r10, r14
 296:	bf 04       	cpc	r11, r15
 298:	31 f1       	breq	.+76     	; 0x2e6 <main+0x74>
		{
			temp = x;
			volt = (2560 * x) / 1024;
 29a:	a0 e0       	ldi	r26, 0x00	; 0
 29c:	ba e0       	ldi	r27, 0x0A	; 10
 29e:	a7 01       	movw	r20, r14
 2a0:	96 01       	movw	r18, r12
 2a2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__muluhisi3>
 2a6:	4b 01       	movw	r8, r22
 2a8:	5c 01       	movw	r10, r24
 2aa:	99 23       	and	r25, r25
 2ac:	34 f4       	brge	.+12     	; 0x2ba <main+0x48>
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	82 0e       	add	r8, r18
 2b2:	23 e0       	ldi	r18, 0x03	; 3
 2b4:	92 1e       	adc	r9, r18
 2b6:	a1 1c       	adc	r10, r1
 2b8:	b1 1c       	adc	r11, r1
 2ba:	d5 01       	movw	r26, r10
 2bc:	c4 01       	movw	r24, r8
 2be:	07 2e       	mov	r0, r23
 2c0:	7a e0       	ldi	r23, 0x0A	; 10
 2c2:	b5 95       	asr	r27
 2c4:	a7 95       	ror	r26
 2c6:	97 95       	ror	r25
 2c8:	87 95       	ror	r24
 2ca:	7a 95       	dec	r23
 2cc:	d1 f7       	brne	.-12     	; 0x2c2 <main+0x50>
 2ce:	70 2d       	mov	r23, r0
			temperature = volt / 10;// Calculate temperature using ADC value
 2d0:	6a e0       	ldi	r22, 0x0A	; 10
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divmodhi4>
 2d8:	86 2f       	mov	r24, r22
 2da:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <temperature>
			
			Control_Fan(temperature);
 2de:	0e 94 8b 00 	call	0x116	; 0x116 <Control_Fan>
    {
		x = ADC_Read(0);// Read ADC value of Temperature sensor 
		
		if (x != temp)
		{
			temp = x;
 2e2:	46 01       	movw	r8, r12
 2e4:	57 01       	movw	r10, r14
			
			Control_Fan(temperature);
			
		}
		
		Send_Data_MCU2(temperature);
 2e6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temperature>
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Send_Data_MCU2>
    }
 2f0:	c8 cf       	rjmp	.-112    	; 0x282 <main+0x10>

000002f2 <__vector_2>:
}

ISR(INT1_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	if(temperature >= 40 && temperature <= 50)
 314:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temperature>
 318:	88 52       	subi	r24, 0x28	; 40
 31a:	8b 30       	cpi	r24, 0x0B	; 11
 31c:	18 f4       	brcc	.+6      	; 0x324 <__vector_2+0x32>
	{
		UART_TX('S');// Stop Machine
 31e:	83 e5       	ldi	r24, 0x53	; 83
 320:	0e 94 48 02 	call	0x490	; 0x490 <UART_TX>
	}
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
	TCNT1 = 63583; // Reset counter to achieve 500ms overflow
 368:	8f e5       	ldi	r24, 0x5F	; 95
 36a:	98 ef       	ldi	r25, 0xF8	; 248
 36c:	9d bd       	out	0x2d, r25	; 45
 36e:	8c bd       	out	0x2c, r24	; 44
	if (temperature > 50) 
 370:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <temperature>
 374:	83 33       	cpi	r24, 0x33	; 51
 376:	88 f0       	brcs	.+34     	; 0x39a <__vector_9+0x54>
	{
		Over_Flow_Counter++;
 378:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		if(Over_Flow_Counter >= 7) // 14 overflows * 500ms = 7 seconds
 382:	87 30       	cpi	r24, 0x07	; 7
 384:	60 f0       	brcs	.+24     	; 0x39e <__vector_9+0x58>
		{
			EEPROM_Write(EEPROM_STATE_ADDRESS, 3); //Write Abnormal State to EEPROM
 386:	63 e0       	ldi	r22, 0x03	; 3
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 71 00 	call	0xe2	; 0xe2 <EEPROM_Write>
			UART_TX('A');
 38e:	81 e4       	ldi	r24, 0x41	; 65
 390:	0e 94 48 02 	call	0x490	; 0x490 <UART_TX>
			Over_Flow_Counter = 0;                 //Restart counter
 394:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 398:	02 c0       	rjmp	.+4      	; 0x39e <__vector_9+0x58>
		}
	}
	else
	{
		Over_Flow_Counter = 0; //Restart counter if condition is no longer met
 39a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <timer1_init>:
#include "Timer.h"


void timer1_init() {
	// Set timer1 to normal mode
	setbit(TCCR1B,CS12);// Prescaler = 256
 3c0:	8e b5       	in	r24, 0x2e	; 46
 3c2:	84 60       	ori	r24, 0x04	; 4
 3c4:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 63583; // Initialize counter to achieve 500ms overflow
 3c6:	8f e5       	ldi	r24, 0x5F	; 95
 3c8:	98 ef       	ldi	r25, 0xF8	; 248
 3ca:	9d bd       	out	0x2d, r25	; 45
 3cc:	8c bd       	out	0x2c, r24	; 44
	setbit(TIMSK,TOIE1);// Enable overflow interrupt
 3ce:	89 b7       	in	r24, 0x39	; 57
 3d0:	84 60       	ori	r24, 0x04	; 4
 3d2:	89 bf       	out	0x39, r24	; 57
 3d4:	08 95       	ret

000003d6 <Timer0_Fast_PWM_INIT>:
}

void Timer0_Fast_PWM_INIT()
{
	setbit(TCCR0,WGM00);// Set mode to Fast PWM
 3d6:	83 b7       	in	r24, 0x33	; 51
 3d8:	80 64       	ori	r24, 0x40	; 64
 3da:	83 bf       	out	0x33, r24	; 51
	setbit(TCCR0,WGM01);
 3dc:	83 b7       	in	r24, 0x33	; 51
 3de:	88 60       	ori	r24, 0x08	; 8
 3e0:	83 bf       	out	0x33, r24	; 51
	
	setbit(DDRB,3);// Set OC0 as output
 3e2:	87 b3       	in	r24, 0x17	; 23
 3e4:	88 60       	ori	r24, 0x08	; 8
 3e6:	87 bb       	out	0x17, r24	; 23
	
	clrbit(TCCR0,CS00);// PreScalar = 8
 3e8:	83 b7       	in	r24, 0x33	; 51
 3ea:	8e 7f       	andi	r24, 0xFE	; 254
 3ec:	83 bf       	out	0x33, r24	; 51
	setbit(TCCR0,CS01);
 3ee:	83 b7       	in	r24, 0x33	; 51
 3f0:	82 60       	ori	r24, 0x02	; 2
 3f2:	83 bf       	out	0x33, r24	; 51
	clrbit(TCCR0,CS02);
 3f4:	83 b7       	in	r24, 0x33	; 51
 3f6:	8b 7f       	andi	r24, 0xFB	; 251
 3f8:	83 bf       	out	0x33, r24	; 51
	
	clrbit(TCCR0,COM00);// nin_Inverting mode
 3fa:	83 b7       	in	r24, 0x33	; 51
 3fc:	8f 7e       	andi	r24, 0xEF	; 239
 3fe:	83 bf       	out	0x33, r24	; 51
	setbit(TCCR0,COM01);
 400:	83 b7       	in	r24, 0x33	; 51
 402:	80 62       	ori	r24, 0x20	; 32
 404:	83 bf       	out	0x33, r24	; 51
	
	OCR0 = 0;
 406:	1c be       	out	0x3c, r1	; 60
 408:	08 95       	ret

0000040a <Timer0_Set_Duty_Cycle>:
}

void Timer0_Set_Duty_Cycle(float DC)
{
 40a:	cf 92       	push	r12
 40c:	df 92       	push	r13
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	6b 01       	movw	r12, r22
 414:	7c 01       	movw	r14, r24
	if(DC > 0 && DC <= 1)
 416:	20 e0       	ldi	r18, 0x00	; 0
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	a9 01       	movw	r20, r18
 41c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__gesf2>
 420:	18 16       	cp	r1, r24
 422:	e4 f4       	brge	.+56     	; 0x45c <Timer0_Set_Duty_Cycle+0x52>
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	40 e8       	ldi	r20, 0x80	; 128
 42a:	5f e3       	ldi	r21, 0x3F	; 63
 42c:	c7 01       	movw	r24, r14
 42e:	b6 01       	movw	r22, r12
 430:	0e 94 bb 02 	call	0x576	; 0x576 <__cmpsf2>
 434:	18 16       	cp	r1, r24
 436:	94 f0       	brlt	.+36     	; 0x45c <Timer0_Set_Duty_Cycle+0x52>
	{
		DC = DC * 256;
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	40 e8       	ldi	r20, 0x80	; 128
 43e:	53 e4       	ldi	r21, 0x43	; 67
 440:	c7 01       	movw	r24, r14
 442:	b6 01       	movw	r22, r12
 444:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__mulsf3>
		OCR0 = DC - 1;
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	40 e8       	ldi	r20, 0x80	; 128
 44e:	5f e3       	ldi	r21, 0x3F	; 63
 450:	0e 94 4e 02 	call	0x49c	; 0x49c <__subsf3>
 454:	0e 94 c0 02 	call	0x580	; 0x580 <__fixunssfsi>
 458:	6c bf       	out	0x3c, r22	; 60
 45a:	0a c0       	rjmp	.+20     	; 0x470 <Timer0_Set_Duty_Cycle+0x66>
	}

	else if(DC <= 0)
 45c:	20 e0       	ldi	r18, 0x00	; 0
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	a9 01       	movw	r20, r18
 462:	c7 01       	movw	r24, r14
 464:	b6 01       	movw	r22, r12
 466:	0e 94 bb 02 	call	0x576	; 0x576 <__cmpsf2>
 46a:	18 16       	cp	r1, r24
 46c:	0c f0       	brlt	.+2      	; 0x470 <Timer0_Set_Duty_Cycle+0x66>
	{
		OCR0 = 0;
 46e:	1c be       	out	0x3c, r1	; 60
	}
	
}
 470:	ff 90       	pop	r15
 472:	ef 90       	pop	r14
 474:	df 90       	pop	r13
 476:	cf 90       	pop	r12
 478:	08 95       	ret

0000047a <UART_INIT>:
#include "UART.h"
#include "STD_MacRos.h"

void UART_INIT(int UBRR)
{
	UBRRL = (unsigned char) UBRR;
 47a:	89 b9       	out	0x09, r24	; 9
	UBRRH = (unsigned char) UBRR >> 8;
 47c:	10 bc       	out	0x20, r1	; 32
	setbit(UCSRB , RXEN); // Enable Receiver
 47e:	8a b1       	in	r24, 0x0a	; 10
 480:	80 61       	ori	r24, 0x10	; 16
 482:	8a b9       	out	0x0a, r24	; 10
	setbit(UCSRB , TXEN); // Enable Transmitter
 484:	8a b1       	in	r24, 0x0a	; 10
 486:	88 60       	ori	r24, 0x08	; 8
 488:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); //  Asynchronous Operation and 8 bit
 48a:	86 e8       	ldi	r24, 0x86	; 134
 48c:	80 bd       	out	0x20, r24	; 32
 48e:	08 95       	ret

00000490 <UART_TX>:
}

void UART_TX(char data)
{
	while (Readbit(UCSRA,UDRE) == 0);
 490:	5d 9b       	sbis	0x0b, 5	; 11
 492:	fe cf       	rjmp	.-4      	; 0x490 <UART_TX>
	UDR = data;
 494:	8c b9       	out	0x0c, r24	; 12
	while (Readbit(UCSRA,TXC) == 0);
 496:	5e 9b       	sbis	0x0b, 6	; 11
 498:	fe cf       	rjmp	.-4      	; 0x496 <UART_TX+0x6>
}
 49a:	08 95       	ret

0000049c <__subsf3>:
 49c:	50 58       	subi	r21, 0x80	; 128

0000049e <__addsf3>:
 49e:	bb 27       	eor	r27, r27
 4a0:	aa 27       	eor	r26, r26
 4a2:	0e 94 66 02 	call	0x4cc	; 0x4cc <__addsf3x>
 4a6:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_round>
 4aa:	0e 94 1c 03 	call	0x638	; 0x638 <__fp_pscA>
 4ae:	38 f0       	brcs	.+14     	; 0x4be <__addsf3+0x20>
 4b0:	0e 94 23 03 	call	0x646	; 0x646 <__fp_pscB>
 4b4:	20 f0       	brcs	.+8      	; 0x4be <__addsf3+0x20>
 4b6:	39 f4       	brne	.+14     	; 0x4c6 <__addsf3+0x28>
 4b8:	9f 3f       	cpi	r25, 0xFF	; 255
 4ba:	19 f4       	brne	.+6      	; 0x4c2 <__addsf3+0x24>
 4bc:	26 f4       	brtc	.+8      	; 0x4c6 <__addsf3+0x28>
 4be:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_nan>
 4c2:	0e f4       	brtc	.+2      	; 0x4c6 <__addsf3+0x28>
 4c4:	e0 95       	com	r30
 4c6:	e7 fb       	bst	r30, 7
 4c8:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_inf>

000004cc <__addsf3x>:
 4cc:	e9 2f       	mov	r30, r25
 4ce:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_split3>
 4d2:	58 f3       	brcs	.-42     	; 0x4aa <__addsf3+0xc>
 4d4:	ba 17       	cp	r27, r26
 4d6:	62 07       	cpc	r22, r18
 4d8:	73 07       	cpc	r23, r19
 4da:	84 07       	cpc	r24, r20
 4dc:	95 07       	cpc	r25, r21
 4de:	20 f0       	brcs	.+8      	; 0x4e8 <__addsf3x+0x1c>
 4e0:	79 f4       	brne	.+30     	; 0x500 <__addsf3x+0x34>
 4e2:	a6 f5       	brtc	.+104    	; 0x54c <__addsf3x+0x80>
 4e4:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_zero>
 4e8:	0e f4       	brtc	.+2      	; 0x4ec <__addsf3x+0x20>
 4ea:	e0 95       	com	r30
 4ec:	0b 2e       	mov	r0, r27
 4ee:	ba 2f       	mov	r27, r26
 4f0:	a0 2d       	mov	r26, r0
 4f2:	0b 01       	movw	r0, r22
 4f4:	b9 01       	movw	r22, r18
 4f6:	90 01       	movw	r18, r0
 4f8:	0c 01       	movw	r0, r24
 4fa:	ca 01       	movw	r24, r20
 4fc:	a0 01       	movw	r20, r0
 4fe:	11 24       	eor	r1, r1
 500:	ff 27       	eor	r31, r31
 502:	59 1b       	sub	r21, r25
 504:	99 f0       	breq	.+38     	; 0x52c <__addsf3x+0x60>
 506:	59 3f       	cpi	r21, 0xF9	; 249
 508:	50 f4       	brcc	.+20     	; 0x51e <__addsf3x+0x52>
 50a:	50 3e       	cpi	r21, 0xE0	; 224
 50c:	68 f1       	brcs	.+90     	; 0x568 <__addsf3x+0x9c>
 50e:	1a 16       	cp	r1, r26
 510:	f0 40       	sbci	r31, 0x00	; 0
 512:	a2 2f       	mov	r26, r18
 514:	23 2f       	mov	r18, r19
 516:	34 2f       	mov	r19, r20
 518:	44 27       	eor	r20, r20
 51a:	58 5f       	subi	r21, 0xF8	; 248
 51c:	f3 cf       	rjmp	.-26     	; 0x504 <__addsf3x+0x38>
 51e:	46 95       	lsr	r20
 520:	37 95       	ror	r19
 522:	27 95       	ror	r18
 524:	a7 95       	ror	r26
 526:	f0 40       	sbci	r31, 0x00	; 0
 528:	53 95       	inc	r21
 52a:	c9 f7       	brne	.-14     	; 0x51e <__addsf3x+0x52>
 52c:	7e f4       	brtc	.+30     	; 0x54c <__addsf3x+0x80>
 52e:	1f 16       	cp	r1, r31
 530:	ba 0b       	sbc	r27, r26
 532:	62 0b       	sbc	r22, r18
 534:	73 0b       	sbc	r23, r19
 536:	84 0b       	sbc	r24, r20
 538:	ba f0       	brmi	.+46     	; 0x568 <__addsf3x+0x9c>
 53a:	91 50       	subi	r25, 0x01	; 1
 53c:	a1 f0       	breq	.+40     	; 0x566 <__addsf3x+0x9a>
 53e:	ff 0f       	add	r31, r31
 540:	bb 1f       	adc	r27, r27
 542:	66 1f       	adc	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	c2 f7       	brpl	.-16     	; 0x53a <__addsf3x+0x6e>
 54a:	0e c0       	rjmp	.+28     	; 0x568 <__addsf3x+0x9c>
 54c:	ba 0f       	add	r27, r26
 54e:	62 1f       	adc	r22, r18
 550:	73 1f       	adc	r23, r19
 552:	84 1f       	adc	r24, r20
 554:	48 f4       	brcc	.+18     	; 0x568 <__addsf3x+0x9c>
 556:	87 95       	ror	r24
 558:	77 95       	ror	r23
 55a:	67 95       	ror	r22
 55c:	b7 95       	ror	r27
 55e:	f7 95       	ror	r31
 560:	9e 3f       	cpi	r25, 0xFE	; 254
 562:	08 f0       	brcs	.+2      	; 0x566 <__addsf3x+0x9a>
 564:	b0 cf       	rjmp	.-160    	; 0x4c6 <__addsf3+0x28>
 566:	93 95       	inc	r25
 568:	88 0f       	add	r24, r24
 56a:	08 f0       	brcs	.+2      	; 0x56e <__addsf3x+0xa2>
 56c:	99 27       	eor	r25, r25
 56e:	ee 0f       	add	r30, r30
 570:	97 95       	ror	r25
 572:	87 95       	ror	r24
 574:	08 95       	ret

00000576 <__cmpsf2>:
 576:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_cmp>
 57a:	08 f4       	brcc	.+2      	; 0x57e <__cmpsf2+0x8>
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	08 95       	ret

00000580 <__fixunssfsi>:
 580:	0e 94 43 03 	call	0x686	; 0x686 <__fp_splitA>
 584:	88 f0       	brcs	.+34     	; 0x5a8 <__fixunssfsi+0x28>
 586:	9f 57       	subi	r25, 0x7F	; 127
 588:	98 f0       	brcs	.+38     	; 0x5b0 <__fixunssfsi+0x30>
 58a:	b9 2f       	mov	r27, r25
 58c:	99 27       	eor	r25, r25
 58e:	b7 51       	subi	r27, 0x17	; 23
 590:	b0 f0       	brcs	.+44     	; 0x5be <__fixunssfsi+0x3e>
 592:	e1 f0       	breq	.+56     	; 0x5cc <__fixunssfsi+0x4c>
 594:	66 0f       	add	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	1a f0       	brmi	.+6      	; 0x5a4 <__fixunssfsi+0x24>
 59e:	ba 95       	dec	r27
 5a0:	c9 f7       	brne	.-14     	; 0x594 <__fixunssfsi+0x14>
 5a2:	14 c0       	rjmp	.+40     	; 0x5cc <__fixunssfsi+0x4c>
 5a4:	b1 30       	cpi	r27, 0x01	; 1
 5a6:	91 f0       	breq	.+36     	; 0x5cc <__fixunssfsi+0x4c>
 5a8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_zero>
 5ac:	b1 e0       	ldi	r27, 0x01	; 1
 5ae:	08 95       	ret
 5b0:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__fp_zero>
 5b4:	67 2f       	mov	r22, r23
 5b6:	78 2f       	mov	r23, r24
 5b8:	88 27       	eor	r24, r24
 5ba:	b8 5f       	subi	r27, 0xF8	; 248
 5bc:	39 f0       	breq	.+14     	; 0x5cc <__fixunssfsi+0x4c>
 5be:	b9 3f       	cpi	r27, 0xF9	; 249
 5c0:	cc f3       	brlt	.-14     	; 0x5b4 <__fixunssfsi+0x34>
 5c2:	86 95       	lsr	r24
 5c4:	77 95       	ror	r23
 5c6:	67 95       	ror	r22
 5c8:	b3 95       	inc	r27
 5ca:	d9 f7       	brne	.-10     	; 0x5c2 <__fixunssfsi+0x42>
 5cc:	3e f4       	brtc	.+14     	; 0x5dc <__fixunssfsi+0x5c>
 5ce:	90 95       	com	r25
 5d0:	80 95       	com	r24
 5d2:	70 95       	com	r23
 5d4:	61 95       	neg	r22
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	8f 4f       	sbci	r24, 0xFF	; 255
 5da:	9f 4f       	sbci	r25, 0xFF	; 255
 5dc:	08 95       	ret

000005de <__fp_cmp>:
 5de:	99 0f       	add	r25, r25
 5e0:	00 08       	sbc	r0, r0
 5e2:	55 0f       	add	r21, r21
 5e4:	aa 0b       	sbc	r26, r26
 5e6:	e0 e8       	ldi	r30, 0x80	; 128
 5e8:	fe ef       	ldi	r31, 0xFE	; 254
 5ea:	16 16       	cp	r1, r22
 5ec:	17 06       	cpc	r1, r23
 5ee:	e8 07       	cpc	r30, r24
 5f0:	f9 07       	cpc	r31, r25
 5f2:	c0 f0       	brcs	.+48     	; 0x624 <__fp_cmp+0x46>
 5f4:	12 16       	cp	r1, r18
 5f6:	13 06       	cpc	r1, r19
 5f8:	e4 07       	cpc	r30, r20
 5fa:	f5 07       	cpc	r31, r21
 5fc:	98 f0       	brcs	.+38     	; 0x624 <__fp_cmp+0x46>
 5fe:	62 1b       	sub	r22, r18
 600:	73 0b       	sbc	r23, r19
 602:	84 0b       	sbc	r24, r20
 604:	95 0b       	sbc	r25, r21
 606:	39 f4       	brne	.+14     	; 0x616 <__fp_cmp+0x38>
 608:	0a 26       	eor	r0, r26
 60a:	61 f0       	breq	.+24     	; 0x624 <__fp_cmp+0x46>
 60c:	23 2b       	or	r18, r19
 60e:	24 2b       	or	r18, r20
 610:	25 2b       	or	r18, r21
 612:	21 f4       	brne	.+8      	; 0x61c <__fp_cmp+0x3e>
 614:	08 95       	ret
 616:	0a 26       	eor	r0, r26
 618:	09 f4       	brne	.+2      	; 0x61c <__fp_cmp+0x3e>
 61a:	a1 40       	sbci	r26, 0x01	; 1
 61c:	a6 95       	lsr	r26
 61e:	8f ef       	ldi	r24, 0xFF	; 255
 620:	81 1d       	adc	r24, r1
 622:	81 1d       	adc	r24, r1
 624:	08 95       	ret

00000626 <__fp_inf>:
 626:	97 f9       	bld	r25, 7
 628:	9f 67       	ori	r25, 0x7F	; 127
 62a:	80 e8       	ldi	r24, 0x80	; 128
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	08 95       	ret

00000632 <__fp_nan>:
 632:	9f ef       	ldi	r25, 0xFF	; 255
 634:	80 ec       	ldi	r24, 0xC0	; 192
 636:	08 95       	ret

00000638 <__fp_pscA>:
 638:	00 24       	eor	r0, r0
 63a:	0a 94       	dec	r0
 63c:	16 16       	cp	r1, r22
 63e:	17 06       	cpc	r1, r23
 640:	18 06       	cpc	r1, r24
 642:	09 06       	cpc	r0, r25
 644:	08 95       	ret

00000646 <__fp_pscB>:
 646:	00 24       	eor	r0, r0
 648:	0a 94       	dec	r0
 64a:	12 16       	cp	r1, r18
 64c:	13 06       	cpc	r1, r19
 64e:	14 06       	cpc	r1, r20
 650:	05 06       	cpc	r0, r21
 652:	08 95       	ret

00000654 <__fp_round>:
 654:	09 2e       	mov	r0, r25
 656:	03 94       	inc	r0
 658:	00 0c       	add	r0, r0
 65a:	11 f4       	brne	.+4      	; 0x660 <__fp_round+0xc>
 65c:	88 23       	and	r24, r24
 65e:	52 f0       	brmi	.+20     	; 0x674 <__fp_round+0x20>
 660:	bb 0f       	add	r27, r27
 662:	40 f4       	brcc	.+16     	; 0x674 <__fp_round+0x20>
 664:	bf 2b       	or	r27, r31
 666:	11 f4       	brne	.+4      	; 0x66c <__fp_round+0x18>
 668:	60 ff       	sbrs	r22, 0
 66a:	04 c0       	rjmp	.+8      	; 0x674 <__fp_round+0x20>
 66c:	6f 5f       	subi	r22, 0xFF	; 255
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	8f 4f       	sbci	r24, 0xFF	; 255
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	08 95       	ret

00000676 <__fp_split3>:
 676:	57 fd       	sbrc	r21, 7
 678:	90 58       	subi	r25, 0x80	; 128
 67a:	44 0f       	add	r20, r20
 67c:	55 1f       	adc	r21, r21
 67e:	59 f0       	breq	.+22     	; 0x696 <__fp_splitA+0x10>
 680:	5f 3f       	cpi	r21, 0xFF	; 255
 682:	71 f0       	breq	.+28     	; 0x6a0 <__fp_splitA+0x1a>
 684:	47 95       	ror	r20

00000686 <__fp_splitA>:
 686:	88 0f       	add	r24, r24
 688:	97 fb       	bst	r25, 7
 68a:	99 1f       	adc	r25, r25
 68c:	61 f0       	breq	.+24     	; 0x6a6 <__fp_splitA+0x20>
 68e:	9f 3f       	cpi	r25, 0xFF	; 255
 690:	79 f0       	breq	.+30     	; 0x6b0 <__fp_splitA+0x2a>
 692:	87 95       	ror	r24
 694:	08 95       	ret
 696:	12 16       	cp	r1, r18
 698:	13 06       	cpc	r1, r19
 69a:	14 06       	cpc	r1, r20
 69c:	55 1f       	adc	r21, r21
 69e:	f2 cf       	rjmp	.-28     	; 0x684 <__fp_split3+0xe>
 6a0:	46 95       	lsr	r20
 6a2:	f1 df       	rcall	.-30     	; 0x686 <__fp_splitA>
 6a4:	08 c0       	rjmp	.+16     	; 0x6b6 <__fp_splitA+0x30>
 6a6:	16 16       	cp	r1, r22
 6a8:	17 06       	cpc	r1, r23
 6aa:	18 06       	cpc	r1, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	f1 cf       	rjmp	.-30     	; 0x692 <__fp_splitA+0xc>
 6b0:	86 95       	lsr	r24
 6b2:	71 05       	cpc	r23, r1
 6b4:	61 05       	cpc	r22, r1
 6b6:	08 94       	sec
 6b8:	08 95       	ret

000006ba <__fp_zero>:
 6ba:	e8 94       	clt

000006bc <__fp_szero>:
 6bc:	bb 27       	eor	r27, r27
 6be:	66 27       	eor	r22, r22
 6c0:	77 27       	eor	r23, r23
 6c2:	cb 01       	movw	r24, r22
 6c4:	97 f9       	bld	r25, 7
 6c6:	08 95       	ret

000006c8 <__gesf2>:
 6c8:	0e 94 ef 02 	call	0x5de	; 0x5de <__fp_cmp>
 6cc:	08 f4       	brcc	.+2      	; 0x6d0 <__gesf2+0x8>
 6ce:	8f ef       	ldi	r24, 0xFF	; 255
 6d0:	08 95       	ret

000006d2 <__mulsf3>:
 6d2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3x>
 6d6:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_round>
 6da:	0e 94 1c 03 	call	0x638	; 0x638 <__fp_pscA>
 6de:	38 f0       	brcs	.+14     	; 0x6ee <__mulsf3+0x1c>
 6e0:	0e 94 23 03 	call	0x646	; 0x646 <__fp_pscB>
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__mulsf3+0x1c>
 6e6:	95 23       	and	r25, r21
 6e8:	11 f0       	breq	.+4      	; 0x6ee <__mulsf3+0x1c>
 6ea:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_inf>
 6ee:	0c 94 19 03 	jmp	0x632	; 0x632 <__fp_nan>
 6f2:	11 24       	eor	r1, r1
 6f4:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_szero>

000006f8 <__mulsf3x>:
 6f8:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_split3>
 6fc:	70 f3       	brcs	.-36     	; 0x6da <__mulsf3+0x8>

000006fe <__mulsf3_pse>:
 6fe:	95 9f       	mul	r25, r21
 700:	c1 f3       	breq	.-16     	; 0x6f2 <__mulsf3+0x20>
 702:	95 0f       	add	r25, r21
 704:	50 e0       	ldi	r21, 0x00	; 0
 706:	55 1f       	adc	r21, r21
 708:	62 9f       	mul	r22, r18
 70a:	f0 01       	movw	r30, r0
 70c:	72 9f       	mul	r23, r18
 70e:	bb 27       	eor	r27, r27
 710:	f0 0d       	add	r31, r0
 712:	b1 1d       	adc	r27, r1
 714:	63 9f       	mul	r22, r19
 716:	aa 27       	eor	r26, r26
 718:	f0 0d       	add	r31, r0
 71a:	b1 1d       	adc	r27, r1
 71c:	aa 1f       	adc	r26, r26
 71e:	64 9f       	mul	r22, r20
 720:	66 27       	eor	r22, r22
 722:	b0 0d       	add	r27, r0
 724:	a1 1d       	adc	r26, r1
 726:	66 1f       	adc	r22, r22
 728:	82 9f       	mul	r24, r18
 72a:	22 27       	eor	r18, r18
 72c:	b0 0d       	add	r27, r0
 72e:	a1 1d       	adc	r26, r1
 730:	62 1f       	adc	r22, r18
 732:	73 9f       	mul	r23, r19
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	62 1f       	adc	r22, r18
 73a:	83 9f       	mul	r24, r19
 73c:	a0 0d       	add	r26, r0
 73e:	61 1d       	adc	r22, r1
 740:	22 1f       	adc	r18, r18
 742:	74 9f       	mul	r23, r20
 744:	33 27       	eor	r19, r19
 746:	a0 0d       	add	r26, r0
 748:	61 1d       	adc	r22, r1
 74a:	23 1f       	adc	r18, r19
 74c:	84 9f       	mul	r24, r20
 74e:	60 0d       	add	r22, r0
 750:	21 1d       	adc	r18, r1
 752:	82 2f       	mov	r24, r18
 754:	76 2f       	mov	r23, r22
 756:	6a 2f       	mov	r22, r26
 758:	11 24       	eor	r1, r1
 75a:	9f 57       	subi	r25, 0x7F	; 127
 75c:	50 40       	sbci	r21, 0x00	; 0
 75e:	9a f0       	brmi	.+38     	; 0x786 <__mulsf3_pse+0x88>
 760:	f1 f0       	breq	.+60     	; 0x79e <__mulsf3_pse+0xa0>
 762:	88 23       	and	r24, r24
 764:	4a f0       	brmi	.+18     	; 0x778 <__mulsf3_pse+0x7a>
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	bb 1f       	adc	r27, r27
 76c:	66 1f       	adc	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	91 50       	subi	r25, 0x01	; 1
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	a9 f7       	brne	.-22     	; 0x762 <__mulsf3_pse+0x64>
 778:	9e 3f       	cpi	r25, 0xFE	; 254
 77a:	51 05       	cpc	r21, r1
 77c:	80 f0       	brcs	.+32     	; 0x79e <__mulsf3_pse+0xa0>
 77e:	0c 94 13 03 	jmp	0x626	; 0x626 <__fp_inf>
 782:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__fp_szero>
 786:	5f 3f       	cpi	r21, 0xFF	; 255
 788:	e4 f3       	brlt	.-8      	; 0x782 <__mulsf3_pse+0x84>
 78a:	98 3e       	cpi	r25, 0xE8	; 232
 78c:	d4 f3       	brlt	.-12     	; 0x782 <__mulsf3_pse+0x84>
 78e:	86 95       	lsr	r24
 790:	77 95       	ror	r23
 792:	67 95       	ror	r22
 794:	b7 95       	ror	r27
 796:	f7 95       	ror	r31
 798:	e7 95       	ror	r30
 79a:	9f 5f       	subi	r25, 0xFF	; 255
 79c:	c1 f7       	brne	.-16     	; 0x78e <__mulsf3_pse+0x90>
 79e:	fe 2b       	or	r31, r30
 7a0:	88 0f       	add	r24, r24
 7a2:	91 1d       	adc	r25, r1
 7a4:	96 95       	lsr	r25
 7a6:	87 95       	ror	r24
 7a8:	97 f9       	bld	r25, 7
 7aa:	08 95       	ret

000007ac <__divmodhi4>:
 7ac:	97 fb       	bst	r25, 7
 7ae:	07 2e       	mov	r0, r23
 7b0:	16 f4       	brtc	.+4      	; 0x7b6 <__divmodhi4+0xa>
 7b2:	00 94       	com	r0
 7b4:	07 d0       	rcall	.+14     	; 0x7c4 <__divmodhi4_neg1>
 7b6:	77 fd       	sbrc	r23, 7
 7b8:	09 d0       	rcall	.+18     	; 0x7cc <__divmodhi4_neg2>
 7ba:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__udivmodhi4>
 7be:	07 fc       	sbrc	r0, 7
 7c0:	05 d0       	rcall	.+10     	; 0x7cc <__divmodhi4_neg2>
 7c2:	3e f4       	brtc	.+14     	; 0x7d2 <__divmodhi4_exit>

000007c4 <__divmodhi4_neg1>:
 7c4:	90 95       	com	r25
 7c6:	81 95       	neg	r24
 7c8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ca:	08 95       	ret

000007cc <__divmodhi4_neg2>:
 7cc:	70 95       	com	r23
 7ce:	61 95       	neg	r22
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255

000007d2 <__divmodhi4_exit>:
 7d2:	08 95       	ret

000007d4 <__muluhisi3>:
 7d4:	0e 94 09 04 	call	0x812	; 0x812 <__umulhisi3>
 7d8:	a5 9f       	mul	r26, r21
 7da:	90 0d       	add	r25, r0
 7dc:	b4 9f       	mul	r27, r20
 7de:	90 0d       	add	r25, r0
 7e0:	a4 9f       	mul	r26, r20
 7e2:	80 0d       	add	r24, r0
 7e4:	91 1d       	adc	r25, r1
 7e6:	11 24       	eor	r1, r1
 7e8:	08 95       	ret

000007ea <__udivmodhi4>:
 7ea:	aa 1b       	sub	r26, r26
 7ec:	bb 1b       	sub	r27, r27
 7ee:	51 e1       	ldi	r21, 0x11	; 17
 7f0:	07 c0       	rjmp	.+14     	; 0x800 <__udivmodhi4_ep>

000007f2 <__udivmodhi4_loop>:
 7f2:	aa 1f       	adc	r26, r26
 7f4:	bb 1f       	adc	r27, r27
 7f6:	a6 17       	cp	r26, r22
 7f8:	b7 07       	cpc	r27, r23
 7fa:	10 f0       	brcs	.+4      	; 0x800 <__udivmodhi4_ep>
 7fc:	a6 1b       	sub	r26, r22
 7fe:	b7 0b       	sbc	r27, r23

00000800 <__udivmodhi4_ep>:
 800:	88 1f       	adc	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	5a 95       	dec	r21
 806:	a9 f7       	brne	.-22     	; 0x7f2 <__udivmodhi4_loop>
 808:	80 95       	com	r24
 80a:	90 95       	com	r25
 80c:	bc 01       	movw	r22, r24
 80e:	cd 01       	movw	r24, r26
 810:	08 95       	ret

00000812 <__umulhisi3>:
 812:	a2 9f       	mul	r26, r18
 814:	b0 01       	movw	r22, r0
 816:	b3 9f       	mul	r27, r19
 818:	c0 01       	movw	r24, r0
 81a:	a3 9f       	mul	r26, r19
 81c:	70 0d       	add	r23, r0
 81e:	81 1d       	adc	r24, r1
 820:	11 24       	eor	r1, r1
 822:	91 1d       	adc	r25, r1
 824:	b2 9f       	mul	r27, r18
 826:	70 0d       	add	r23, r0
 828:	81 1d       	adc	r24, r1
 82a:	11 24       	eor	r1, r1
 82c:	91 1d       	adc	r25, r1
 82e:	08 95       	ret

00000830 <_exit>:
 830:	f8 94       	cli

00000832 <__stop_program>:
 832:	ff cf       	rjmp	.-2      	; 0x832 <__stop_program>
